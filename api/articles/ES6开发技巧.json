{"title":"ES6开发技巧","slug":"ES6开发技巧","date":"2021-08-17T07:20:11.000Z","updated":"2023-06-21T08:55:09.212Z","comments":true,"path":"api/articles/ES6开发技巧.json","excerpt":null,"covers":null,"content":"<blockquote>\n<p>最近老有面试的问 ES6 的语法，然后吧知识实在太多，而且我人表达能力不强，对上这个问题，一大堆答案涌上来结果到嘴边就变得七零八落的，所以在这里总结一下。一方面写一遍自己已经知道的，加深巩固，一方面查漏补缺，补充自身能力<br><strong>我个人喜欢把所有新的特性都统称为 ES6，因为发布的实在太快的，我也不想了解每个特性具体是哪个版本加上去的，是新功能用就完事了</strong></p>\n</blockquote>\n<h2 id=\"新增的基础类型\"><a href=\"#新增的基础类型\" class=\"headerlink\" title=\"新增的基础类型\"></a>新增的基础类型</h2><h3 id=\"BigInt\"><a href=\"#BigInt\" class=\"headerlink\" title=\"BigInt\"></a>BigInt</h3><p>在<code>js</code>中，所有数字都保存为 64 位的浮点数，这就导致了两个问题:</p>\n<ul>\n<li>数值的精度只能精确到 53 个二进制位，大于该范围的整数是无法精确表示的;</li>\n<li>大于或等于 2 的 1024 次方的数值，已经完全无法表示，返回<code>Infinity</code>;</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">53</span>) === <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">53</span>) + <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">1024</span>) <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure></div>\n<p>因此 <code>ES6</code> 引入了 <code>BigInt</code> 来解决这个问题，他只能用来表示整数，且没有位数限制。为了与 <code>Number</code> 类型区分，<code>BigInt</code> 类型必须加后缀 <code>n</code></p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">123n</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">456n</span>;</span><br><span class=\"line\">a * b <span class=\"comment\">// BigInt 仍然可以保持精度，56088n</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a <span class=\"comment\">// bigint</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><p><code>Symbol</code> 类型用于生成独一无二的值，保证绝不会与其他命名产生冲突。<code>Symbol</code> 值通过 <code>Symbol</code> 函数生成，接受一个字符串为参数，参数为<code>Symbol</code>值的描述。</p>\n<blockquote>\n<p><strong>注意: Symbol 函数的参数只表示值得描述，不表示值本身，即使参数相同，值也是不同的</strong></p>\n</blockquote>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">a1 === a2 <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a1 <span class=\"comment\">// symbol</span></span><br></pre></td></tr></table></figure></div>\n<p><code>Symbol</code> 值不可以与其他类型的值进行运算，但可以显式的转换为字符串和布尔值。虽然可以转换为字符串，但还是推荐使用<code>description</code>属性获取描述信息。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>(a) <span class=\"comment\">// Symbol(foo)</span></span><br><span class=\"line\">a.description <span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"let-amp-const\"><a href=\"#let-amp-const\" class=\"headerlink\" title=\"let &amp; const\"></a>let &amp; const</h2><p><code>let</code> 用于定义变量， <code>const</code> 定义常量, 解决了 <code>var</code> 定义变量导致的变量提升，造成暂时性死区。 同时也新增了块级作用域的概念，每一层代码块都有单独的作用域，互不影响。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 经典案例</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 5 5 5 5 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 1 2 3 4</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"运算符扩展\"><a href=\"#运算符扩展\" class=\"headerlink\" title=\"运算符扩展\"></a>运算符扩展</h2><h3 id=\"指数运算符\"><a href=\"#指数运算符\" class=\"headerlink\" title=\"指数运算符\"></a>指数运算符</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">3</span> <span class=\"comment\">// 8 Math.pow(2, 3)</span></span><br></pre></td></tr></table></figure></div>\n<p>需要注意的是，链式计算时，计算规则不是从左到右儿是从右到左</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">2</span> ** <span class=\"number\">3</span> <span class=\"comment\">// 256</span></span><br></pre></td></tr></table></figure></div>\n<p>指数运算符与等号结合，组成新的赋值运算符</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">a **= <span class=\"number\">3</span> <span class=\"comment\">// a = a * a * a</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"链式运算符\"><a href=\"#链式运算符\" class=\"headerlink\" title=\"链式运算符\"></a>链式运算符</h3><p>在业务逻辑中常出现需要链式判断的情况，书写起来特别麻烦，因此 <code>ES6</code> 引入了简写</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">ajax().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> role = res &amp;&amp; res.data &amp;&amp; res.data.user &amp;&amp; res.data.user.roles || <span class=\"string\">'visiter'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">ajax().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> role = res?.data?.user?.roles || <span class=\"string\">'visiter'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Null-判断运算符\"><a href=\"#Null-判断运算符\" class=\"headerlink\" title=\"Null 判断运算符\"></a>Null 判断运算符</h3><p>读取对象属性的时候，如果某个属性的值是 <code>null</code> 或 <code>undefined</code>，通常需要为它们指定默认值。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">ajax().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> role = res &amp;&amp; res.data &amp;&amp; res.data.user &amp;&amp; res.data.user.avatar || <span class=\"string\">'avatar'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">ajax().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> role = res?.data?.user?.avatar ?? <span class=\"string\">'avatar'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<p>逻辑赋值运算符</p>\n<p><code>ES6</code> 引入了三个新的逻辑赋值运算符，将逻辑运算符与赋值运算符进行结合。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x ||= y <span class=\"comment\">// x || (x = y)</span></span><br><span class=\"line\">x &amp;&amp;= y <span class=\"comment\">// x &amp;&amp; (x = y)</span></span><br><span class=\"line\">x ??= y <span class=\"comment\">// x ?? (x = y)</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"Number-amp-String-的扩展\"><a href=\"#Number-amp-String-的扩展\" class=\"headerlink\" title=\"Number &amp; String 的扩展\"></a>Number &amp; String 的扩展</h2><h3 id=\"数字分隔符\"><a href=\"#数字分隔符\" class=\"headerlink\" title=\"数字分隔符\"></a>数字分隔符</h3><p>数字分隔符可以让你在定义长数字时，更加地一目了然</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"number\">1</span>_000_000_000</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"string\">'man'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">`我叫<span class=\"subst\">$&#123;name&#125;</span>, 今年<span class=\"subst\">$&#123;age&#125;</span>岁，性别<span class=\"subst\">$&#123;sex == <span class=\"string\">'man'</span> ? <span class=\"string\">'男'</span>: <span class=\"string\">'女'</span>&#125;</span>`</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"String-includes-amp-String-startsWidth-amp-String-endsWidth\"><a href=\"#String-includes-amp-String-startsWidth-amp-String-endsWidth\" class=\"headerlink\" title=\"String.includes &amp; String.startsWidth &amp; String.endsWidth\"></a>String.includes &amp; String.startsWidth &amp; String.endsWidth</h3><ul>\n<li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</li>\n<li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>\n<li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">'hello, world'</span></span><br><span class=\"line\">str.includes(<span class=\"string\">'llo'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.startsWidth(<span class=\"string\">'hell'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.endsWidth(<span class=\"string\">'ld'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"String-trimStart-amp-String-trimEnd\"><a href=\"#String-trimStart-amp-String-trimEnd\" class=\"headerlink\" title=\"String.trimStart &amp; String.trimEnd\"></a>String.trimStart &amp; String.trimEnd</h3><p><code>ES6</code>对字符串实例新增了 <code>trimStart()</code> 和 <code>trimEnd()</code> 这两个方法。<code>trimStart()</code>消除字符串头部的空格，<code>trimEnd()</code> 消除尾部的空格。返回新字符串</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">'  abc  '</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.trim() <span class=\"comment\">// \"abc\"</span></span><br><span class=\"line\">s.trimStart() <span class=\"comment\">// \"abc  \"</span></span><br><span class=\"line\">s.trimEnd() <span class=\"comment\">// \"  abc\"</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"String-matchAll-amp-String-replaceAll\"><a href=\"#String-matchAll-amp-String-replaceAll\" class=\"headerlink\" title=\"String.matchAll() &amp; String.replaceAll()\"></a>String.matchAll() &amp; String.replaceAll()</h3><p><code>matchAll()</code> 方法返回一个正则表达式在当前字符串的所有匹配；<code>replaceAll</code> 可以替换字符串中匹配到的所有字符</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = name || <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age = age || <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">name = <span class=\"string\">'singleDogNo.1'</span>, age = <span class=\"number\">18</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">start, ...number</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(start, number)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">// 1 [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只有一句 return，简写</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"number\">2</span> * name</span><br><span class=\"line\"><span class=\"comment\">// 如果是对象，括号包起来</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> (&#123; name &#125;)</span><br></pre></td></tr></table></figure></div>\n<p>普通函数和箭头函数的区别：</p>\n<ul>\n<li>箭头函数没有自己的 <code>this</code> 指针</li>\n<li>箭头函数没有 <code>arguments</code> 对象</li>\n<li>箭头函数没有原型对象</li>\n<li>箭头函数不可作为构造函数，不能使用 <code>new</code></li>\n</ul>\n<h2 id=\"Array-amp-Object\"><a href=\"#Array-amp-Object\" class=\"headerlink\" title=\"Array &amp; Object\"></a>Array &amp; Object</h2><h3 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = [...arr1, ...arr2, ...arr3] <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'singleDogNo.1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'man'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name, ...other&#125; = user <span class=\"comment\">// name: singleDogNo.1 other: &#123;age: 18, sex: 'man'&#125;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Array-forEach\"><a href=\"#Array-forEach\" class=\"headerlink\" title=\"Array.forEach\"></a>Array.forEach</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身,</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item, index, arr)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1 0 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 2 1 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 3 2 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 4 3 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 5 4 [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Array-map\"><a href=\"#Array-map\" class=\"headerlink\" title=\"Array.map\"></a>Array.map</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身，常用于返回一个处理过后的新数组</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// [ 2, 4, 6, 8, 10 ]</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Array-filter\"><a href=\"#Array-filter\" class=\"headerlink\" title=\"Array.filter\"></a>Array.filter</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身，常用于遍历并过滤期望值</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.filter(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> num &gt; <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// [ 4, 5 ]</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Array-some\"><a href=\"#Array-some\" class=\"headerlink\" title=\"Array.some\"></a>Array.some</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身，就是只有一个是真，就返回真</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.some(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Array-every\"><a href=\"#Array-every\" class=\"headerlink\" title=\"Array.every\"></a>Array.every</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身，必须所有都是真，才返回真</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.every(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item)</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Array-reduce\"><a href=\"#Array-reduce\" class=\"headerlink\" title=\"Array.reduce\"></a>Array.reduce</h3><p>这里不做解释，参考<a href=\"https://lost-dream.github.io/blog/posts/200f4743\" target=\"_blank\" rel=\"noopener\">详解 reduce</a></p>\n<h3 id=\"Array-find-amp-Array-findIndex\"><a href=\"#Array-find-amp-Array-findIndex\" class=\"headerlink\" title=\"Array.find &amp; Array.findIndex\"></a>Array.find &amp; Array.findIndex</h3><p>查找符合条件的元素（下标），返回查找的元素（下标）。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'singleDogNo.1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'singleDogNo.2'</span>, <span class=\"attr\">age</span>: <span class=\"number\">19</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'singleDogNo.3'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> item = arr.find(<span class=\"function\">(<span class=\"params\">&#123; name &#125;</span>) =&gt;</span> name === <span class=\"string\">'singleDogNo.1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = arr.findIndex(<span class=\"function\">(<span class=\"params\">&#123; name &#125;</span>) =&gt;</span> name === <span class=\"string\">'singleDogNo.1'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// &#123; name: 'singleDogNo.1', age: 18 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Array-includes\"><a href=\"#Array-includes\" class=\"headerlink\" title=\"Array.includes\"></a>Array.includes</h3><p>传入元素，如果数组中能找到此元素，则返回true，否则返回false</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'张三'</span>, <span class=\"string\">'李四'</span> , <span class=\"string\">'王五'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.includes(<span class=\"string\">'李四'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Array-flat\"><a href=\"#Array-flat\" class=\"headerlink\" title=\"Array.flat\"></a>Array.flat</h3><p>将多维数组降级为一维数组</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat()) <span class=\"comment\">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Object-属性简写\"><a href=\"#Object-属性简写\" class=\"headerlink\" title=\"Object 属性简写\"></a>Object 属性简写</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Object-keys-amp-Object-values\"><a href=\"#Object-keys-amp-Object-values\" class=\"headerlink\" title=\"Object.keys &amp; Object.values\"></a>Object.keys &amp; Object.values</h3><p>获取对象 <code>key &amp; value</code> 的集合</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  sex: <span class=\"string\">'man'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj) <span class=\"comment\">// [ 'name', 'age', 'sex' ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> values = <span class=\"built_in\">Object</span>.values(obj) <span class=\"comment\">// [ 'singleDogNo.1', 18, 'man' ]</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"Object-entries-amp-amp-Object-fromEntries\"><a href=\"#Object-entries-amp-amp-Object-fromEntries\" class=\"headerlink\" title=\"Object.entries &amp;&amp; Object.fromEntries\"></a>Object.entries &amp;&amp; Object.fromEntries</h3><p>获取对象键值对的集合 / 将键值对集合转化为对象</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  sex: <span class=\"string\">'man'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> entries = <span class=\"built_in\">Object</span>.entries(obj) <span class=\"comment\">// [ [ 'name', 'singleDogNo.1' ], [ 'age', 18 ], [ 'sex', 'man' ] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  [<span class=\"string\">'name'</span>, <span class=\"string\">'singleDogNo.1'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'age'</span>, <span class=\"number\">18</span>],</span><br><span class=\"line\">  [<span class=\"string\">'sex'</span>, <span class=\"string\">'man'</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.fromEntries(arr) <span class=\"comment\">// &#123; name: 'singleDogNo.1', age: 18, sex: 'man' &#125;</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"Set-amp-Map\"><a href=\"#Set-amp-Map\" class=\"headerlink\" title=\"Set &amp; Map\"></a>Set &amp; Map</h2><h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>类似数组结构，但成员的值都是唯一的，不会出现重复的值。<code>Set</code>实例的方法</p>\n<ul>\n<li><code>Set.prototype.size</code>: 返回 <code>Set</code> 实例的长度</li>\n<li><code>Set.prototype.add(value)</code>: 添加元素，返回添加后的 <code>Set</code> 实例</li>\n<li><code>Set.prototype.delete(value)</code>: 删除元素，返回删除后的 <code>Set</code> 实例</li>\n<li><code>Set.prototype.has(value)</code>: 查询元素，返回一个布尔值，表示该值是否为 <code>Set</code> 实例的成员</li>\n<li><code>Set.prototype.clear()</code>: 清除 <code>Set</code> 实例的所有成员</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">set</span> = new Set([1, 2, 3])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>.size // 3</span><br><span class=\"line\"><span class=\"keyword\">set</span>.add(3) // [1, 2, 3]</span><br><span class=\"line\"><span class=\"keyword\">set</span>.delete(3) // [1, 2]</span><br><span class=\"line\"><span class=\"keyword\">set</span>.has(2) // true</span><br><span class=\"line\"><span class=\"keyword\">set</span>.clear()</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h3><p><code>WeakSet</code> 与 <code>Set</code> 类似，区别在于</p>\n<ul>\n<li><code>WeakSet</code> 的成员只能是对象，不能是其他类型的值</li>\n<li><code>WeakSet</code> 的成员都属于弱引用，这意味着如果其他对象都不在引用该对象，垃圾回收机制会自动回收占用的内存</li>\n</ul>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>类似数组结构，但是键不限于字符串，各种类型的值甚至是对象都可以作为键出现。是一种更完善的键值对数据结构。 <code>Map</code>实例的方法</p>\n<ul>\n<li><code>Map.prototype.size</code>: 返回 <code>Map</code> 实例的长度</li>\n<li><code>Map.prototype.set(key, value)</code>: 设置键值对，返回 <code>Map</code> 实例</li>\n<li><code>Map.prototype.get(key)</code>: 通过键，获取对应的值，如果不存在返回 <code>undefined</code></li>\n<li><code>Map.prototype.has(key)</code>: 查询键，返回一个布尔值，表示该键是否存在 <code>Map</code> 实例中</li>\n<li><code>Map.prototype.delete( key)</code>: 删除键，返回一个布尔值，成功为 <code>true</code>，失败为 <code>false</code></li>\n<li><code>Map.prototype.clear()</code>: 清除 <code>Map</code> 实例的所有成员</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [name, <span class=\"string\">'singleDogNo.1'</span>],</span><br><span class=\"line\">  [age, <span class=\"number\">18</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">map.set(<span class=\"string\">'sex'</span>, <span class=\"string\">'man'</span>)</span><br><span class=\"line\">map.size <span class=\"comment\">// 3</span></span><br><span class=\"line\">map.get(<span class=\"string\">'name'</span>) <span class=\"comment\">// singleDogNo.1</span></span><br><span class=\"line\">map.has(<span class=\"string\">'age'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(<span class=\"string\">'name'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">map.clear()</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h3><p><code>WeakMap</code> 与 <code>Map</code> 类似，区别在于</p>\n<ul>\n<li><code>WeakMap</code> 的成员只能是对象，不能是其他类型的值</li>\n<li><code>WeakMap</code> 的成员都属于弱引用，这意味着如果其他对象都不在引用该对象，垃圾回收机制会自动回收占用的内存</li>\n</ul>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>这里不做解释，详见 <a href=\"/posts/fa98e2f7\">promise 详解</a></p>\n<h2 id=\"Async-amp-Await\"><a href=\"#Async-amp-Await\" class=\"headerlink\" title=\"Async &amp; Await\"></a>Async &amp; Await</h2><p>待补充</p>\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2><p>待补充</p>\n","more":"<blockquote>\n<p>最近老有面试的问 ES6 的语法，然后吧知识实在太多，而且我人表达能力不强，对上这个问题，一大堆答案涌上来结果到嘴边就变得七零八落的，所以在这里总结一下。一方面写一遍自己已经知道的，加深巩固，一方面查漏补缺，补充自身能力<br><strong>我个人喜欢把所有新的特性都统称为 ES6，因为发布的实在太快的，我也不想了解每个特性具体是哪个版本加上去的，是新功能用就完事了</strong></p>\n</blockquote>\n<h2 id=\"新增的基础类型\"><a href=\"#新增的基础类型\" class=\"headerlink\" title=\"新增的基础类型\"></a>新增的基础类型</h2><h3 id=\"BigInt\"><a href=\"#BigInt\" class=\"headerlink\" title=\"BigInt\"></a>BigInt</h3><p>在<code>js</code>中，所有数字都保存为 64 位的浮点数，这就导致了两个问题:</p>\n<ul>\n<li>数值的精度只能精确到 53 个二进制位，大于该范围的整数是无法精确表示的;</li>\n<li>大于或等于 2 的 1024 次方的数值，已经完全无法表示，返回<code>Infinity</code>;</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">53</span>) === <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">53</span>) + <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">1024</span>) <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure>\n<p>因此 <code>ES6</code> 引入了 <code>BigInt</code> 来解决这个问题，他只能用来表示整数，且没有位数限制。为了与 <code>Number</code> 类型区分，<code>BigInt</code> 类型必须加后缀 <code>n</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">123n</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">456n</span>;</span><br><span class=\"line\">a * b <span class=\"comment\">// BigInt 仍然可以保持精度，56088n</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a <span class=\"comment\">// bigint</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><p><code>Symbol</code> 类型用于生成独一无二的值，保证绝不会与其他命名产生冲突。<code>Symbol</code> 值通过 <code>Symbol</code> 函数生成，接受一个字符串为参数，参数为<code>Symbol</code>值的描述。</p>\n<blockquote>\n<p><strong>注意: Symbol 函数的参数只表示值得描述，不表示值本身，即使参数相同，值也是不同的</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> a2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">a1 === a2 <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a1 <span class=\"comment\">// symbol</span></span><br></pre></td></tr></table></figure>\n<p><code>Symbol</code> 值不可以与其他类型的值进行运算，但可以显式的转换为字符串和布尔值。虽然可以转换为字符串，但还是推荐使用<code>description</code>属性获取描述信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>(a) <span class=\"comment\">// Symbol(foo)</span></span><br><span class=\"line\">a.description <span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"let-amp-const\"><a href=\"#let-amp-const\" class=\"headerlink\" title=\"let &amp; const\"></a>let &amp; const</h2><p><code>let</code> 用于定义变量， <code>const</code> 定义常量, 解决了 <code>var</code> 定义变量导致的变量提升，造成暂时性死区。 同时也新增了块级作用域的概念，每一层代码块都有单独的作用域，互不影响。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 经典案例</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 5 5 5 5 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 1 2 3 4</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"运算符扩展\"><a href=\"#运算符扩展\" class=\"headerlink\" title=\"运算符扩展\"></a>运算符扩展</h2><h3 id=\"指数运算符\"><a href=\"#指数运算符\" class=\"headerlink\" title=\"指数运算符\"></a>指数运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">3</span> <span class=\"comment\">// 8 Math.pow(2, 3)</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是，链式计算时，计算规则不是从左到右儿是从右到左</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">2</span> ** <span class=\"number\">3</span> <span class=\"comment\">// 256</span></span><br></pre></td></tr></table></figure>\n<p>指数运算符与等号结合，组成新的赋值运算符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">a **= <span class=\"number\">3</span> <span class=\"comment\">// a = a * a * a</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"链式运算符\"><a href=\"#链式运算符\" class=\"headerlink\" title=\"链式运算符\"></a>链式运算符</h3><p>在业务逻辑中常出现需要链式判断的情况，书写起来特别麻烦，因此 <code>ES6</code> 引入了简写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">ajax().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> role = res &amp;&amp; res.data &amp;&amp; res.data.user &amp;&amp; res.data.user.roles || <span class=\"string\">'visiter'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">ajax().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> role = res?.data?.user?.roles || <span class=\"string\">'visiter'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Null-判断运算符\"><a href=\"#Null-判断运算符\" class=\"headerlink\" title=\"Null 判断运算符\"></a>Null 判断运算符</h3><p>读取对象属性的时候，如果某个属性的值是 <code>null</code> 或 <code>undefined</code>，通常需要为它们指定默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">ajax().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> role = res &amp;&amp; res.data &amp;&amp; res.data.user &amp;&amp; res.data.user.avatar || <span class=\"string\">'avatar'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">ajax().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> role = res?.data?.user?.avatar ?? <span class=\"string\">'avatar'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>逻辑赋值运算符</p>\n<p><code>ES6</code> 引入了三个新的逻辑赋值运算符，将逻辑运算符与赋值运算符进行结合。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x ||= y <span class=\"comment\">// x || (x = y)</span></span><br><span class=\"line\">x &amp;&amp;= y <span class=\"comment\">// x &amp;&amp; (x = y)</span></span><br><span class=\"line\">x ??= y <span class=\"comment\">// x ?? (x = y)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Number-amp-String-的扩展\"><a href=\"#Number-amp-String-的扩展\" class=\"headerlink\" title=\"Number &amp; String 的扩展\"></a>Number &amp; String 的扩展</h2><h3 id=\"数字分隔符\"><a href=\"#数字分隔符\" class=\"headerlink\" title=\"数字分隔符\"></a>数字分隔符</h3><p>数字分隔符可以让你在定义长数字时，更加地一目了然</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"number\">1</span>_000_000_000</span><br></pre></td></tr></table></figure>\n<h3 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"string\">'man'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">`我叫<span class=\"subst\">$&#123;name&#125;</span>, 今年<span class=\"subst\">$&#123;age&#125;</span>岁，性别<span class=\"subst\">$&#123;sex == <span class=\"string\">'man'</span> ? <span class=\"string\">'男'</span>: <span class=\"string\">'女'</span>&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"String-includes-amp-String-startsWidth-amp-String-endsWidth\"><a href=\"#String-includes-amp-String-startsWidth-amp-String-endsWidth\" class=\"headerlink\" title=\"String.includes &amp; String.startsWidth &amp; String.endsWidth\"></a>String.includes &amp; String.startsWidth &amp; String.endsWidth</h3><ul>\n<li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</li>\n<li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>\n<li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">'hello, world'</span></span><br><span class=\"line\">str.includes(<span class=\"string\">'llo'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.startsWidth(<span class=\"string\">'hell'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.endsWidth(<span class=\"string\">'ld'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"String-trimStart-amp-String-trimEnd\"><a href=\"#String-trimStart-amp-String-trimEnd\" class=\"headerlink\" title=\"String.trimStart &amp; String.trimEnd\"></a>String.trimStart &amp; String.trimEnd</h3><p><code>ES6</code>对字符串实例新增了 <code>trimStart()</code> 和 <code>trimEnd()</code> 这两个方法。<code>trimStart()</code>消除字符串头部的空格，<code>trimEnd()</code> 消除尾部的空格。返回新字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">'  abc  '</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.trim() <span class=\"comment\">// \"abc\"</span></span><br><span class=\"line\">s.trimStart() <span class=\"comment\">// \"abc  \"</span></span><br><span class=\"line\">s.trimEnd() <span class=\"comment\">// \"  abc\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"String-matchAll-amp-String-replaceAll\"><a href=\"#String-matchAll-amp-String-replaceAll\" class=\"headerlink\" title=\"String.matchAll() &amp; String.replaceAll()\"></a>String.matchAll() &amp; String.replaceAll()</h3><p><code>matchAll()</code> 方法返回一个正则表达式在当前字符串的所有匹配；<code>replaceAll</code> 可以替换字符串中匹配到的所有字符</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = name || <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age = age || <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">name = <span class=\"string\">'singleDogNo.1'</span>, age = <span class=\"number\">18</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">start, ...number</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(start, number)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">// 1 [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只有一句 return，简写</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"number\">2</span> * name</span><br><span class=\"line\"><span class=\"comment\">// 如果是对象，括号包起来</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> (&#123; name &#125;)</span><br></pre></td></tr></table></figure>\n<p>普通函数和箭头函数的区别：</p>\n<ul>\n<li>箭头函数没有自己的 <code>this</code> 指针</li>\n<li>箭头函数没有 <code>arguments</code> 对象</li>\n<li>箭头函数没有原型对象</li>\n<li>箭头函数不可作为构造函数，不能使用 <code>new</code></li>\n</ul>\n<h2 id=\"Array-amp-Object\"><a href=\"#Array-amp-Object\" class=\"headerlink\" title=\"Array &amp; Object\"></a>Array &amp; Object</h2><h3 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr3 = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = [...arr1, ...arr2, ...arr3] <span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'singleDogNo.1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'man'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name, ...other&#125; = user <span class=\"comment\">// name: singleDogNo.1 other: &#123;age: 18, sex: 'man'&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-forEach\"><a href=\"#Array-forEach\" class=\"headerlink\" title=\"Array.forEach\"></a>Array.forEach</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item, index, arr)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1 0 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 2 1 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 3 2 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 4 3 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 5 4 [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-map\"><a href=\"#Array-map\" class=\"headerlink\" title=\"Array.map\"></a>Array.map</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身，常用于返回一个处理过后的新数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// [ 2, 4, 6, 8, 10 ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-filter\"><a href=\"#Array-filter\" class=\"headerlink\" title=\"Array.filter\"></a>Array.filter</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身，常用于遍历并过滤期望值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.filter(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> num &gt; <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// [ 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-some\"><a href=\"#Array-some\" class=\"headerlink\" title=\"Array.some\"></a>Array.some</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身，就是只有一个是真，就返回真</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.some(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-every\"><a href=\"#Array-every\" class=\"headerlink\" title=\"Array.every\"></a>Array.every</h3><p>三个参数表示：遍历当前项，下标，遍历的数组本身，必须所有都是真，才返回真</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.every(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item)</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-reduce\"><a href=\"#Array-reduce\" class=\"headerlink\" title=\"Array.reduce\"></a>Array.reduce</h3><p>这里不做解释，参考<a href=\"https://lost-dream.github.io/blog/posts/200f4743\" target=\"_blank\" rel=\"noopener\">详解 reduce</a></p>\n<h3 id=\"Array-find-amp-Array-findIndex\"><a href=\"#Array-find-amp-Array-findIndex\" class=\"headerlink\" title=\"Array.find &amp; Array.findIndex\"></a>Array.find &amp; Array.findIndex</h3><p>查找符合条件的元素（下标），返回查找的元素（下标）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'singleDogNo.1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'singleDogNo.2'</span>, <span class=\"attr\">age</span>: <span class=\"number\">19</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'singleDogNo.3'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> item = arr.find(<span class=\"function\">(<span class=\"params\">&#123; name &#125;</span>) =&gt;</span> name === <span class=\"string\">'singleDogNo.1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = arr.findIndex(<span class=\"function\">(<span class=\"params\">&#123; name &#125;</span>) =&gt;</span> name === <span class=\"string\">'singleDogNo.1'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(item) <span class=\"comment\">// &#123; name: 'singleDogNo.1', age: 18 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(index) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-includes\"><a href=\"#Array-includes\" class=\"headerlink\" title=\"Array.includes\"></a>Array.includes</h3><p>传入元素，如果数组中能找到此元素，则返回true，否则返回false</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'张三'</span>, <span class=\"string\">'李四'</span> , <span class=\"string\">'王五'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.includes(<span class=\"string\">'李四'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-flat\"><a href=\"#Array-flat\" class=\"headerlink\" title=\"Array.flat\"></a>Array.flat</h3><p>将多维数组降级为一维数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat()) <span class=\"comment\">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Object-属性简写\"><a href=\"#Object-属性简写\" class=\"headerlink\" title=\"Object 属性简写\"></a>Object 属性简写</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Object-keys-amp-Object-values\"><a href=\"#Object-keys-amp-Object-values\" class=\"headerlink\" title=\"Object.keys &amp; Object.values\"></a>Object.keys &amp; Object.values</h3><p>获取对象 <code>key &amp; value</code> 的集合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  sex: <span class=\"string\">'man'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj) <span class=\"comment\">// [ 'name', 'age', 'sex' ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> values = <span class=\"built_in\">Object</span>.values(obj) <span class=\"comment\">// [ 'singleDogNo.1', 18, 'man' ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Object-entries-amp-amp-Object-fromEntries\"><a href=\"#Object-entries-amp-amp-Object-fromEntries\" class=\"headerlink\" title=\"Object.entries &amp;&amp; Object.fromEntries\"></a>Object.entries &amp;&amp; Object.fromEntries</h3><p>获取对象键值对的集合 / 将键值对集合转化为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'singleDogNo.1'</span></span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  sex: <span class=\"string\">'man'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> entries = <span class=\"built_in\">Object</span>.entries(obj) <span class=\"comment\">// [ [ 'name', 'singleDogNo.1' ], [ 'age', 18 ], [ 'sex', 'man' ] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [</span><br><span class=\"line\">  [<span class=\"string\">'name'</span>, <span class=\"string\">'singleDogNo.1'</span>],</span><br><span class=\"line\">  [<span class=\"string\">'age'</span>, <span class=\"number\">18</span>],</span><br><span class=\"line\">  [<span class=\"string\">'sex'</span>, <span class=\"string\">'man'</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.fromEntries(arr) <span class=\"comment\">// &#123; name: 'singleDogNo.1', age: 18, sex: 'man' &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Set-amp-Map\"><a href=\"#Set-amp-Map\" class=\"headerlink\" title=\"Set &amp; Map\"></a>Set &amp; Map</h2><h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>类似数组结构，但成员的值都是唯一的，不会出现重复的值。<code>Set</code>实例的方法</p>\n<ul>\n<li><code>Set.prototype.size</code>: 返回 <code>Set</code> 实例的长度</li>\n<li><code>Set.prototype.add(value)</code>: 添加元素，返回添加后的 <code>Set</code> 实例</li>\n<li><code>Set.prototype.delete(value)</code>: 删除元素，返回删除后的 <code>Set</code> 实例</li>\n<li><code>Set.prototype.has(value)</code>: 查询元素，返回一个布尔值，表示该值是否为 <code>Set</code> 实例的成员</li>\n<li><code>Set.prototype.clear()</code>: 清除 <code>Set</code> 实例的所有成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">set</span> = new Set([1, 2, 3])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>.size // 3</span><br><span class=\"line\"><span class=\"keyword\">set</span>.add(3) // [1, 2, 3]</span><br><span class=\"line\"><span class=\"keyword\">set</span>.delete(3) // [1, 2]</span><br><span class=\"line\"><span class=\"keyword\">set</span>.has(2) // true</span><br><span class=\"line\"><span class=\"keyword\">set</span>.clear()</span><br></pre></td></tr></table></figure>\n<h3 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h3><p><code>WeakSet</code> 与 <code>Set</code> 类似，区别在于</p>\n<ul>\n<li><code>WeakSet</code> 的成员只能是对象，不能是其他类型的值</li>\n<li><code>WeakSet</code> 的成员都属于弱引用，这意味着如果其他对象都不在引用该对象，垃圾回收机制会自动回收占用的内存</li>\n</ul>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>类似数组结构，但是键不限于字符串，各种类型的值甚至是对象都可以作为键出现。是一种更完善的键值对数据结构。 <code>Map</code>实例的方法</p>\n<ul>\n<li><code>Map.prototype.size</code>: 返回 <code>Map</code> 实例的长度</li>\n<li><code>Map.prototype.set(key, value)</code>: 设置键值对，返回 <code>Map</code> 实例</li>\n<li><code>Map.prototype.get(key)</code>: 通过键，获取对应的值，如果不存在返回 <code>undefined</code></li>\n<li><code>Map.prototype.has(key)</code>: 查询键，返回一个布尔值，表示该键是否存在 <code>Map</code> 实例中</li>\n<li><code>Map.prototype.delete( key)</code>: 删除键，返回一个布尔值，成功为 <code>true</code>，失败为 <code>false</code></li>\n<li><code>Map.prototype.clear()</code>: 清除 <code>Map</code> 实例的所有成员</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [name, <span class=\"string\">'singleDogNo.1'</span>],</span><br><span class=\"line\">  [age, <span class=\"number\">18</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">map.set(<span class=\"string\">'sex'</span>, <span class=\"string\">'man'</span>)</span><br><span class=\"line\">map.size <span class=\"comment\">// 3</span></span><br><span class=\"line\">map.get(<span class=\"string\">'name'</span>) <span class=\"comment\">// singleDogNo.1</span></span><br><span class=\"line\">map.has(<span class=\"string\">'age'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">map.delete(<span class=\"string\">'name'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">map.clear()</span><br></pre></td></tr></table></figure>\n<h3 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h3><p><code>WeakMap</code> 与 <code>Map</code> 类似，区别在于</p>\n<ul>\n<li><code>WeakMap</code> 的成员只能是对象，不能是其他类型的值</li>\n<li><code>WeakMap</code> 的成员都属于弱引用，这意味着如果其他对象都不在引用该对象，垃圾回收机制会自动回收占用的内存</li>\n</ul>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>这里不做解释，详见 <a href=\"/posts/fa98e2f7\">promise 详解</a></p>\n<h2 id=\"Async-amp-Await\"><a href=\"#Async-amp-Await\" class=\"headerlink\" title=\"Async &amp; Await\"></a>Async &amp; Await</h2><p>待补充</p>\n<h2 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h2><p>待补充</p>\n","categories":[{"name":"es6","path":"api/categories/es6.json"}],"tags":[{"name":"es6","path":"api/tags/es6.json"}]}