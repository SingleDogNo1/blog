{"title":"video小记","slug":"Video小记","date":"2018-01-24T07:43:53.000Z","updated":"2023-06-21T08:55:09.213Z","comments":true,"path":"api/articles/Video小记.json","excerpt":null,"covers":null,"content":"<blockquote>\n<p>html5新增的audio和video有很多的相同之处，本节中的绝大部分属性和方法在audio同样适用。</p>\n</blockquote>\n<h2 id=\"video标签的使用\"><a href=\"#video标签的使用\" class=\"headerlink\" title=\"video标签的使用\"></a>video标签的使用</h2><p>如果你想使用视频，最简单的方法:</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">HTML</span></header><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>但在大多数情况下不建议这样使用，因为视频格式可能不支持。所以你要写成这样:</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">HTML</span></header><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span>&gt;</span></span><br><span class=\"line\">   ...</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>这样你可以使用多种视频格式，如果不支持会尝试下一种格式。<strong>目前，video元素支持三种视频格式：MP4、WebM、Ogg。</strong></p>\n<h2 id=\"video标签的属性\"><a href=\"#video标签的属性\" class=\"headerlink\" title=\"video标签的属性\"></a>video标签的属性</h2><p>本质上，video对象也是一个普通的DOM对象，你可以像选取普通的DOM对象一样选中它:</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  javascript</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> video = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'cideo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  jquery</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> video =  $(<span class=\"string\">'#video'</span>).get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></div>\n<p>video标签有以下属性:</p>\n<ul>\n<li>autoplay: 如果出现该属性，则视频在就绪后马上播放</li>\n<li>controls: 如果出现该属性，则向用户显示控件</li>\n<li>width: 视频宽度</li>\n<li>height: 视频高度</li>\n<li>src: 视频的路径(video标签定义的路径)</li>\n<li>poster: 视频封面，没有播放时显示的图片</li>\n<li>preload: 如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性</li>\n<li>muted: 如果出现该属性，视频的音频输出为静音。</li>\n<li>loop: 如果出现该属性，则当媒介文件完成播放后再次开始播放</li>\n</ul>\n<h2 id=\"video对象的属性\"><a href=\"#video对象的属性\" class=\"headerlink\" title=\"video对象的属性\"></a>video对象的属性</h2><ul>\n<li>audioTracks: 返回表示可用音频轨道的 AudioTrackList 对象。</li>\n<li>autoplay: 设置或返回是否在就绪（加载完成）后随即播放视频。</li>\n<li>buffered: 返回表示视频已缓冲部分的 TimeRanges 对象。</li>\n<li>controller: 返回表示视频当前媒体控制器的 MediaController 对象。</li>\n<li>controls: 设置或返回视频是否应该显示控件（比如播放/暂停等）。</li>\n<li>crossOrigin: 设置或返回视频的 CORS 设置。</li>\n<li>currentSrc: 返回当前视频的 URL。</li>\n<li>currentTime: 设置或返回视频中的当前播放位置（以秒计）。</li>\n<li>defaultMuted: 设置或返回视频默认是否静音。</li>\n<li>defaultPlaybackRate: 设置或返回视频的默认播放速度。</li>\n<li>duration: 返回视频的长度（以秒计）。</li>\n<li>ended: 返回视频的播放是否已结束。</li>\n<li>error: 返回表示视频错误状态的 MediaError 对象。</li>\n<li>height: 设置或返回视频的 height 属性的值。</li>\n<li>loop: 设置或返回视频是否应在结束时再次播放。</li>\n<li>mediaGroup: 设置或返回视频所属媒介组合的名称。</li>\n<li>muted: 设置或返回是否关闭声音。</li>\n<li>networkState: 返回视频的当前网络状态。</li>\n<li>paused: 设置或返回视频是否暂停。</li>\n<li>playbackRate: 设置或返回视频播放的速度。</li>\n<li>played: 返回表示视频已播放部分的 TimeRanges 对象。</li>\n<li>poster: 设置或返回视频的 poster 属性的值。</li>\n<li>preload: 设置或返回视频的 preload 属性的值。</li>\n<li>readyState: 返回视频当前的就绪状态。</li>\n<li>seekable: 返回表示视频可寻址部分的 TimeRanges 对象。</li>\n<li>seeking: 返回用户当前是否正在视频中进行查找。</li>\n<li>src: 设置或返回视频的 src 属性的值。</li>\n<li>startDate: 返回表示当前时间偏移的 Date 对象。</li>\n<li>textTracks: 返回表示可用文本轨道的 TextTrackList 对象。</li>\n<li>videoTracks: 返回表示可用视频轨道的 VideoTrackList 对象。</li>\n<li>volume: 设置或返回视频的音量。</li>\n<li>width: 设置或返回视频的 width 属性的值。</li>\n</ul>\n<h2 id=\"video对象的方法\"><a href=\"#video对象的方法\" class=\"headerlink\" title=\"video对象的方法\"></a>video对象的方法</h2><ul>\n<li>video.play(): 开始播放</li>\n<li>video.pause(): 暂停播放</li>\n</ul>\n<h2 id=\"video对象的事件\"><a href=\"#video对象的事件\" class=\"headerlink\" title=\"video对象的事件\"></a>video对象的事件</h2><ul>\n<li>video.onloadstart = fn(): 客户端开始请求数据时触发</li>\n<li>video.onprogress = fn(): 客户端正在请求数据时触发</li>\n<li>video.onsuspend = fn(): 延迟下载时触发</li>\n<li>video.onabort = fn(): 客户端主动终止下载时触发（不是因为错误引起）</li>\n<li>video.onerror = fn(): 请求数据时遇到错误时触发</li>\n<li>video.onstalled = fn(): 网速失速时触发</li>\n<li>video.onplay = fn(): 开始播放时触发</li>\n<li>video.onpause = fn(): 暂停时触发</li>\n<li>video.onloadedmetadata = fn(): 成功获取资源长度</li>\n<li>video.onloadeddata = fn(): 当前帧的数据已加载，但没有足够的数据来播放指定视频的下一帧时触发</li>\n<li>video.onwaiting = fn(): 等待数据，并非错误</li>\n<li>video.onplaying = fn(): 开始回放时触发</li>\n<li>video.oncanplay = fn(): 可以播放，但中途可能因为加载而暂停</li>\n<li>video.oncanplaythrough = fn(): 可以播放，视屏全部加载完毕</li>\n<li>video.onseeking = fn(): 寻找资源中不断触发</li>\n<li>video.onseeked = fn(): 寻找资源完毕时触发</li>\n<li>video.ontimeupdate = fn(): 播放时间改变时触发</li>\n<li>video.onended = fn(): 播放结束时触发</li>\n<li>video.onratechange = fn(): 播放速率改变时触发</li>\n<li>video.ondurationchange = fn(): 资源长度改变时触发</li>\n<li>video.onvolumechange = fn(): 音量改变时触发</li>\n</ul>\n<p>当视频处于加载过程中时，会依次触发以下事件:</p>\n<ul>\n<li>video.onloadstart</li>\n<li>video.ondurationchange</li>\n<li>video.onloadedmetadata</li>\n<li>video.onloadeddata</li>\n<li>video.onprogress</li>\n<li>video.oncanplay</li>\n<li>video.oncanplaythrough</li>\n</ul>\n","more":"<blockquote>\n<p>html5新增的audio和video有很多的相同之处，本节中的绝大部分属性和方法在audio同样适用。</p>\n</blockquote>\n<h2 id=\"video标签的使用\"><a href=\"#video标签的使用\" class=\"headerlink\" title=\"video标签的使用\"></a>video标签的使用</h2><p>如果你想使用视频，最简单的方法:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但在大多数情况下不建议这样使用，因为视频格式可能不支持。所以你要写成这样:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.ogg\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"movie.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span>&gt;</span></span><br><span class=\"line\">   ...</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样你可以使用多种视频格式，如果不支持会尝试下一种格式。<strong>目前，video元素支持三种视频格式：MP4、WebM、Ogg。</strong></p>\n<h2 id=\"video标签的属性\"><a href=\"#video标签的属性\" class=\"headerlink\" title=\"video标签的属性\"></a>video标签的属性</h2><p>本质上，video对象也是一个普通的DOM对象，你可以像选取普通的DOM对象一样选中它:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  javascript</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> video = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'cideo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  jquery</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> video =  $(<span class=\"string\">'#video'</span>).get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>video标签有以下属性:</p>\n<ul>\n<li>autoplay: 如果出现该属性，则视频在就绪后马上播放</li>\n<li>controls: 如果出现该属性，则向用户显示控件</li>\n<li>width: 视频宽度</li>\n<li>height: 视频高度</li>\n<li>src: 视频的路径(video标签定义的路径)</li>\n<li>poster: 视频封面，没有播放时显示的图片</li>\n<li>preload: 如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性</li>\n<li>muted: 如果出现该属性，视频的音频输出为静音。</li>\n<li>loop: 如果出现该属性，则当媒介文件完成播放后再次开始播放</li>\n</ul>\n<h2 id=\"video对象的属性\"><a href=\"#video对象的属性\" class=\"headerlink\" title=\"video对象的属性\"></a>video对象的属性</h2><ul>\n<li>audioTracks: 返回表示可用音频轨道的 AudioTrackList 对象。</li>\n<li>autoplay: 设置或返回是否在就绪（加载完成）后随即播放视频。</li>\n<li>buffered: 返回表示视频已缓冲部分的 TimeRanges 对象。</li>\n<li>controller: 返回表示视频当前媒体控制器的 MediaController 对象。</li>\n<li>controls: 设置或返回视频是否应该显示控件（比如播放/暂停等）。</li>\n<li>crossOrigin: 设置或返回视频的 CORS 设置。</li>\n<li>currentSrc: 返回当前视频的 URL。</li>\n<li>currentTime: 设置或返回视频中的当前播放位置（以秒计）。</li>\n<li>defaultMuted: 设置或返回视频默认是否静音。</li>\n<li>defaultPlaybackRate: 设置或返回视频的默认播放速度。</li>\n<li>duration: 返回视频的长度（以秒计）。</li>\n<li>ended: 返回视频的播放是否已结束。</li>\n<li>error: 返回表示视频错误状态的 MediaError 对象。</li>\n<li>height: 设置或返回视频的 height 属性的值。</li>\n<li>loop: 设置或返回视频是否应在结束时再次播放。</li>\n<li>mediaGroup: 设置或返回视频所属媒介组合的名称。</li>\n<li>muted: 设置或返回是否关闭声音。</li>\n<li>networkState: 返回视频的当前网络状态。</li>\n<li>paused: 设置或返回视频是否暂停。</li>\n<li>playbackRate: 设置或返回视频播放的速度。</li>\n<li>played: 返回表示视频已播放部分的 TimeRanges 对象。</li>\n<li>poster: 设置或返回视频的 poster 属性的值。</li>\n<li>preload: 设置或返回视频的 preload 属性的值。</li>\n<li>readyState: 返回视频当前的就绪状态。</li>\n<li>seekable: 返回表示视频可寻址部分的 TimeRanges 对象。</li>\n<li>seeking: 返回用户当前是否正在视频中进行查找。</li>\n<li>src: 设置或返回视频的 src 属性的值。</li>\n<li>startDate: 返回表示当前时间偏移的 Date 对象。</li>\n<li>textTracks: 返回表示可用文本轨道的 TextTrackList 对象。</li>\n<li>videoTracks: 返回表示可用视频轨道的 VideoTrackList 对象。</li>\n<li>volume: 设置或返回视频的音量。</li>\n<li>width: 设置或返回视频的 width 属性的值。</li>\n</ul>\n<h2 id=\"video对象的方法\"><a href=\"#video对象的方法\" class=\"headerlink\" title=\"video对象的方法\"></a>video对象的方法</h2><ul>\n<li>video.play(): 开始播放</li>\n<li>video.pause(): 暂停播放</li>\n</ul>\n<h2 id=\"video对象的事件\"><a href=\"#video对象的事件\" class=\"headerlink\" title=\"video对象的事件\"></a>video对象的事件</h2><ul>\n<li>video.onloadstart = fn(): 客户端开始请求数据时触发</li>\n<li>video.onprogress = fn(): 客户端正在请求数据时触发</li>\n<li>video.onsuspend = fn(): 延迟下载时触发</li>\n<li>video.onabort = fn(): 客户端主动终止下载时触发（不是因为错误引起）</li>\n<li>video.onerror = fn(): 请求数据时遇到错误时触发</li>\n<li>video.onstalled = fn(): 网速失速时触发</li>\n<li>video.onplay = fn(): 开始播放时触发</li>\n<li>video.onpause = fn(): 暂停时触发</li>\n<li>video.onloadedmetadata = fn(): 成功获取资源长度</li>\n<li>video.onloadeddata = fn(): 当前帧的数据已加载，但没有足够的数据来播放指定视频的下一帧时触发</li>\n<li>video.onwaiting = fn(): 等待数据，并非错误</li>\n<li>video.onplaying = fn(): 开始回放时触发</li>\n<li>video.oncanplay = fn(): 可以播放，但中途可能因为加载而暂停</li>\n<li>video.oncanplaythrough = fn(): 可以播放，视屏全部加载完毕</li>\n<li>video.onseeking = fn(): 寻找资源中不断触发</li>\n<li>video.onseeked = fn(): 寻找资源完毕时触发</li>\n<li>video.ontimeupdate = fn(): 播放时间改变时触发</li>\n<li>video.onended = fn(): 播放结束时触发</li>\n<li>video.onratechange = fn(): 播放速率改变时触发</li>\n<li>video.ondurationchange = fn(): 资源长度改变时触发</li>\n<li>video.onvolumechange = fn(): 音量改变时触发</li>\n</ul>\n<p>当视频处于加载过程中时，会依次触发以下事件:</p>\n<ul>\n<li>video.onloadstart</li>\n<li>video.ondurationchange</li>\n<li>video.onloadedmetadata</li>\n<li>video.onloadeddata</li>\n<li>video.onprogress</li>\n<li>video.oncanplay</li>\n<li>video.oncanplaythrough</li>\n</ul>\n","categories":[{"name":"video","path":"api/categories/video.json"}],"tags":[{"name":"video","path":"api/tags/video.json"}]}