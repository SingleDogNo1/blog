{"title":"vue3 脚手架（五）","slug":"vite-vue-5","date":"2021-07-07T03:00:41.000Z","updated":"2023-06-21T08:55:09.214Z","comments":true,"path":"api/articles/vite-vue-5.json","excerpt":null,"covers":null,"content":"<blockquote>\n<p>本文仓库地址为: <a href=\"https://github.com/lost-dream/vue3-template\" target=\"_blank\" rel=\"noopener\">vue3-template</a></p>\n</blockquote>\n<h2 id=\"css-scss-优化\"><a href=\"#css-scss-优化\" class=\"headerlink\" title=\"css/scss 优化\"></a>css/scss 优化</h2><p>经验丰富的老开发都知道 css 定义模块和变量的重要性，这里我不打算细说，而且在之前的项目搭建中也专门给 css 预留了模块的位置。那么在使用 <code>css/scss</code> 变量、方法的时候还是会存在一些问题:</p>\n<ul>\n<li>所有的变量和方法需要引入才可以使用，也就是说我的每一页都需要先引入 <code>var.scss</code> 和 <code>mixins.scss</code> 才可以使用，太麻烦了…</li>\n<li>目前常见的 UI 框架当中大部分组件都有直接的定义组件颜色的属性，或者就算没有直接的属性可以修改，开发中我们也更习惯直接在行内修改组件的样式，那么，如何把我在 <code>scss</code> 中定义的变量，使用在 <code>vue</code> 的 <code>js</code>中呢？</li>\n</ul>\n<p>先说前者，在 <code>webpack</code> 的时候，可以使用 <code>sass-resources-loader</code> 处理，<code>vite</code>中则是有直接的<a href=\"https://cn.vitejs.dev/config/#css-preprocessoroptions\" target=\"_blank\" rel=\"noopener\">配置项</a>可以实现。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"><span>/src/hooks/glob.ts</span></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    preprocessorOptions: &#123;</span><br><span class=\"line\">      scss: &#123;</span><br><span class=\"line\">        additionalData: <span class=\"string\">`@import \"./src/styles/variables/index.scss\";`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>而且 <code>sass</code> 支持导出变量，使用 <code>:export</code> 可以导出 <code>sass</code>变量</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"><span>/src/hooks/glob.ts</span></span><span class=\"mac-panel__language\">SCSS</span></header><figure class=\"iseeu highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$--color-primary</span>: rgba(<span class=\"number\">21</span>, <span class=\"number\">134</span>, <span class=\"number\">179</span>, <span class=\"number\">0.9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">:export &#123;</span><br><span class=\"line\">  themeColor: <span class=\"variable\">$--color-primary</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>直接导入就可以拿到颜色的，但是直接获取的结果是纯文本，需要处理一下保存成 <code>json</code> 才可以使用。按照惯例，把它放在 <code>hooks</code>中</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"><span>/src/hooks/glob.ts</span></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'@/styles/variables/var.scss'</span></span><br><span class=\"line\"><span class=\"comment\">// 可以查看一下直接引入的结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(styles)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useGlobCss = (): <span class=\"function\"><span class=\"params\">any</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cssStr = styles</span><br><span class=\"line\">    .replace(<span class=\"string\">':export'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    .replaceAll(<span class=\"string\">';'</span>, <span class=\"string\">','</span>)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/(?:\\s*['\"]*)?((rgb.+\\))|(#?[a-zA-Z0-9]+))(?:['\"]*\\s*)?/g</span>, <span class=\"string\">\"'$1'\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> css = <span class=\"built_in\">eval</span>(<span class=\"string\">`(<span class=\"subst\">$&#123;cssStr&#125;</span>)`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> css</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>在使用的地方引用即可</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"><span>/src/views/Home/index.vue</span></span><span class=\"mac-panel__language\">DIFF</span></header><figure class=\"iseeu highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"><span class=\"addition\">+  &lt;el-button :style=\"&#123; color: styles.themeColor &#125;\"&gt;按钮&lt;/el-button&gt;</span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=\"ts\"&gt;</span><br><span class=\"line\"><span class=\"addition\">+  import &#123; import &#123; useGlobCss &#125; from '@/hooks/globCss' &#125;</span></span><br><span class=\"line\">   setup() &#123;</span><br><span class=\"line\"><span class=\"addition\">+    const styles = useGlobCss()</span></span><br><span class=\"line\">     return &#123;</span><br><span class=\"line\"><span class=\"addition\">+      styles</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"添加开发环境-mock-数据\"><a href=\"#添加开发环境-mock-数据\" class=\"headerlink\" title=\"添加开发环境 mock 数据\"></a>添加开发环境 mock 数据</h2><p>添加 <code>mockjs</code> 和 <code>vite-plugin-mock</code></p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">SHELL</span></header><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add mockjs</span><br><span class=\"line\">yarn add vite-plugin-mock -D</span><br></pre></td></tr></table></figure></div>\n<p>修改 <code>vite-config.ts</code></p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">DIFF</span></header><figure class=\"iseeu highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+  import &#123; viteMockServe &#125; from 'vite-plugin-mock'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    vue(),</span><br><span class=\"line\"><span class=\"addition\">+   viteMockServe(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     mockPath: 'mock',</span></span><br><span class=\"line\"><span class=\"addition\">+     localEnabled: command === 'serve',</span></span><br><span class=\"line\"><span class=\"addition\">+     prodEnabled: false,</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></div>\n<p>修改 <code>mock</code>文件夹中的模拟请求文件，返回数据的类型为 <code>vite-plugin-mock</code> 定义的 <code>MockMethod</code></p>\n","more":"<blockquote>\n<p>本文仓库地址为: <a href=\"https://github.com/lost-dream/vue3-template\" target=\"_blank\" rel=\"noopener\">vue3-template</a></p>\n</blockquote>\n<h2 id=\"css-scss-优化\"><a href=\"#css-scss-优化\" class=\"headerlink\" title=\"css/scss 优化\"></a>css/scss 优化</h2><p>经验丰富的老开发都知道 css 定义模块和变量的重要性，这里我不打算细说，而且在之前的项目搭建中也专门给 css 预留了模块的位置。那么在使用 <code>css/scss</code> 变量、方法的时候还是会存在一些问题:</p>\n<ul>\n<li>所有的变量和方法需要引入才可以使用，也就是说我的每一页都需要先引入 <code>var.scss</code> 和 <code>mixins.scss</code> 才可以使用，太麻烦了…</li>\n<li>目前常见的 UI 框架当中大部分组件都有直接的定义组件颜色的属性，或者就算没有直接的属性可以修改，开发中我们也更习惯直接在行内修改组件的样式，那么，如何把我在 <code>scss</code> 中定义的变量，使用在 <code>vue</code> 的 <code>js</code>中呢？</li>\n</ul>\n<p>先说前者，在 <code>webpack</code> 的时候，可以使用 <code>sass-resources-loader</code> 处理，<code>vite</code>中则是有直接的<a href=\"https://cn.vitejs.dev/config/#css-preprocessoroptions\" target=\"_blank\" rel=\"noopener\">配置项</a>可以实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    preprocessorOptions: &#123;</span><br><span class=\"line\">      scss: &#123;</span><br><span class=\"line\">        additionalData: <span class=\"string\">`@import \"./src/styles/variables/index.scss\";`</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而且 <code>sass</code> 支持导出变量，使用 <code>:export</code> 可以导出 <code>sass</code>变量</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$--color-primary</span>: rgba(<span class=\"number\">21</span>, <span class=\"number\">134</span>, <span class=\"number\">179</span>, <span class=\"number\">0.9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">:export &#123;</span><br><span class=\"line\">  themeColor: <span class=\"variable\">$--color-primary</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接导入就可以拿到颜色的，但是直接获取的结果是纯文本，需要处理一下保存成 <code>json</code> 才可以使用。按照惯例，把它放在 <code>hooks</code>中</p>\n<figure class=\"highlight js\"><figcaption><span>/src/hooks/glob.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'@/styles/variables/var.scss'</span></span><br><span class=\"line\"><span class=\"comment\">// 可以查看一下直接引入的结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(styles)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useGlobCss = (): <span class=\"function\"><span class=\"params\">any</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cssStr = styles</span><br><span class=\"line\">    .replace(<span class=\"string\">':export'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    .replaceAll(<span class=\"string\">';'</span>, <span class=\"string\">','</span>)</span><br><span class=\"line\">    .replace(<span class=\"regexp\">/(?:\\s*['\"]*)?((rgb.+\\))|(#?[a-zA-Z0-9]+))(?:['\"]*\\s*)?/g</span>, <span class=\"string\">\"'$1'\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> css = <span class=\"built_in\">eval</span>(<span class=\"string\">`(<span class=\"subst\">$&#123;cssStr&#125;</span>)`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> css</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在使用的地方引用即可</p>\n<figure class=\"highlight diff\"><figcaption><span>/src/views/Home/index.vue</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\"><span class=\"addition\">+  &lt;el-button :style=\"&#123; color: styles.themeColor &#125;\"&gt;按钮&lt;/el-button&gt;</span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=\"ts\"&gt;</span><br><span class=\"line\"><span class=\"addition\">+  import &#123; import &#123; useGlobCss &#125; from '@/hooks/globCss' &#125;</span></span><br><span class=\"line\">   setup() &#123;</span><br><span class=\"line\"><span class=\"addition\">+    const styles = useGlobCss()</span></span><br><span class=\"line\">     return &#123;</span><br><span class=\"line\"><span class=\"addition\">+      styles</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加开发环境-mock-数据\"><a href=\"#添加开发环境-mock-数据\" class=\"headerlink\" title=\"添加开发环境 mock 数据\"></a>添加开发环境 mock 数据</h2><p>添加 <code>mockjs</code> 和 <code>vite-plugin-mock</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add mockjs</span><br><span class=\"line\">yarn add vite-plugin-mock -D</span><br></pre></td></tr></table></figure>\n<p>修改 <code>vite-config.ts</code></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+  import &#123; viteMockServe &#125; from 'vite-plugin-mock'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    vue(),</span><br><span class=\"line\"><span class=\"addition\">+   viteMockServe(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     mockPath: 'mock',</span></span><br><span class=\"line\"><span class=\"addition\">+     localEnabled: command === 'serve',</span></span><br><span class=\"line\"><span class=\"addition\">+     prodEnabled: false,</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>修改 <code>mock</code>文件夹中的模拟请求文件，返回数据的类型为 <code>vite-plugin-mock</code> 定义的 <code>MockMethod</code></p>\n","categories":[{"name":"vue","path":"api/categories/vue.json"}],"tags":[{"name":"vue3","path":"api/tags/vue3.json"},{"name":"vite","path":"api/tags/vite.json"}]}