{"title":"管理团队代码","slug":"管理团队代码","date":"2018-10-16T08:07:51.000Z","updated":"2023-06-21T08:55:09.216Z","comments":true,"path":"api/articles/管理团队代码.json","excerpt":null,"covers":null,"content":"<blockquote>\n<p>prettier的中文意思是“漂亮的、机灵的”，也是一个流行的代码格式化工具的名称，它能够解析代码，使用你自己设定的规则来重新打印出格式规范的代码。</p>\n</blockquote>\n<h2 id=\"同样是代码解析工具，为什么有了eslint还需要prettier？\"><a href=\"#同样是代码解析工具，为什么有了eslint还需要prettier？\" class=\"headerlink\" title=\"同样是代码解析工具，为什么有了eslint还需要prettier？\"></a>同样是代码解析工具，为什么有了eslint还需要prettier？</h2><p>众所周知，eslint是一款代码检查工具，但它有不足的地方。虽然提供了大量的代码检查方案，但也只是停留在了代码检查的阶段而已。他会提出警告：你的代码不符合我制定的规范，但也仅此而已。但prettier不同。prettier的处理方案是：删除所有代码原始样式，并通过既定的规则，重新生成AST，然后生成新的代码。用这种方法确保所有输出的代码都符合一致的样式。先看一个简单的例子：</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo</span></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure></div>\n<p>但或许你喜欢注释里方法远一些呢？</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure></div>\n<p>事实上，如果注释和方法之间插入的都是空白行，在eslint看来，这俩种方法是完全相同的，都不会产生错误。再来看另一个例子：</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(foo).css().animate().addClass().click()</span><br></pre></td></tr></table></figure></div>\n<p>但如果你更喜欢这样的写法呢？</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(foo).css()</span><br><span class=\"line\">      .animate()</span><br><span class=\"line\">      .addClass()</span><br><span class=\"line\">      .click()</span><br></pre></td></tr></table></figure></div>\n<p>很显然，俩种方法都有存在的可能性，但同样的，eslint还是会认为这样都是极好的，不会做任何处理。</p>\n<p>这样的例子其实有很多。因此，eslint的局限性就凸显了出来，我们需要prettier来更加规范我们的代码。prettier的处理方式如上所述，删除你的所有代码样式，然后按照约束的规则，重新生成符合标准的代码。这样一来就保证了无论你的代码以什么样的格式输入，都能保证在prettier解析之后得到的代码是完全一样的。</p>\n<h2 id=\"为什么prettier比eslint更强大，我们我选择单独使用prettier？\"><a href=\"#为什么prettier比eslint更强大，我们我选择单独使用prettier？\" class=\"headerlink\" title=\"为什么prettier比eslint更强大，我们我选择单独使用prettier？\"></a>为什么prettier比eslint更强大，我们我选择单独使用prettier？</h2><p>prettier虽然有更强大的能力，但他只提供了非常少的规则。换句话说，我们使用prettier来生成代码，但生成代码的规则还是由eslint来提供的。</p>\n<h2 id=\"如何使用prettier？\"><a href=\"#如何使用prettier？\" class=\"headerlink\" title=\"如何使用prettier？\"></a>如何使用prettier？</h2><h3 id=\"首先安装prettier\"><a href=\"#首先安装prettier\" class=\"headerlink\" title=\"首先安装prettier\"></a>首先安装prettier</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">SHELL</span></header><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D eslint-plugin-prettier eslint-config-prettier</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"然后编辑-eslintrc\"><a href=\"#然后编辑-eslintrc\" class=\"headerlink\" title=\"然后编辑.eslintrc\"></a>然后编辑.eslintrc</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  extends: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"plugin:prettier/recommended\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">    <span class=\"string\">'prettier'</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>rules里可以填写eslint的规则或者eslint-config-prettier的规则。</p>\n<h3 id=\"最后创建-prettierrc文件，写prettier自己的规则：\"><a href=\"#最后创建-prettierrc文件，写prettier自己的规则：\" class=\"headerlink\" title=\"最后创建.prettierrc文件，写prettier自己的规则：\"></a>最后创建.prettierrc文件，写prettier自己的规则：</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JSON</span></header><figure class=\"iseeu highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\"><span class=\"attr\">\"tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"attr\">\"useTabs\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">\"trailingComma\"</span>: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"bracketSpacing\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">\"jsxBracketSameLine\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">\"arrowParens\"</span>: <span class=\"string\">\"avoid\"</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>具体的规则<a href=\"https://prettier.io/docs/en/options.html\" target=\"_blank\" rel=\"noopener\">看这里</a>。</p>\n<h2 id=\"husky-又是什么东西？\"><a href=\"#husky-又是什么东西？\" class=\"headerlink\" title=\"husky 又是什么东西？\"></a>husky 又是什么东西？</h2><p>husky可以阻止git commit 和git push的操作。我们可以配合使用，只有prettier没有问题时才可以提交git操作。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">SHELL</span></header><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D lint-staged husky</span><br></pre></td></tr></table></figure></div>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"scripts\": &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"lint\": \"eslint --ext .js,.vue src\",</span><br><span class=\"line\">    \"format\": \"prettier --write \\\"src/**/*.js\\\" \\\"src/**/*.vue\\\"\",</span><br><span class=\"line\">    \"precommit\": \"lint-staged\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"lint-staged\": &#123;</span><br><span class=\"line\">    \"src/**/*.&#123;js,json,css,vue&#125;\": [</span><br><span class=\"line\">      \"prettier --write\",</span><br><span class=\"line\">      \"eslint --fix\",</span><br><span class=\"line\">      <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">      \"pre-commit\": \"npm run lint\",</span><br><span class=\"line\">      \"pre-push\": \"npm test\",</span><br><span class=\"line\">      \"...\": \"...\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里scripts里添加了三个命令，第一个检测src目录下的js文件和vue文件是否符合eslint标准，第二个按照prettier标准格式化src文件夹中的js文件和vue文件，第三条规定在git commit之前调起lint-staged。<br>lint-staged则规定了顺序执行三个命令，先按照prettier规则重写文件，再解决eslint警告，最后添加git文件。</p>\n<p>husky则规定了在commit之前运行lint命令，不通过会报错，无法commit。同样的，push之前也可以做一些操作。更具体的细节<a href=\"https://github.com/typicode/husky\" target=\"_blank\" rel=\"noopener\">看这里</a>。</p>\n","more":"<blockquote>\n<p>prettier的中文意思是“漂亮的、机灵的”，也是一个流行的代码格式化工具的名称，它能够解析代码，使用你自己设定的规则来重新打印出格式规范的代码。</p>\n</blockquote>\n<h2 id=\"同样是代码解析工具，为什么有了eslint还需要prettier？\"><a href=\"#同样是代码解析工具，为什么有了eslint还需要prettier？\" class=\"headerlink\" title=\"同样是代码解析工具，为什么有了eslint还需要prettier？\"></a>同样是代码解析工具，为什么有了eslint还需要prettier？</h2><p>众所周知，eslint是一款代码检查工具，但它有不足的地方。虽然提供了大量的代码检查方案，但也只是停留在了代码检查的阶段而已。他会提出警告：你的代码不符合我制定的规范，但也仅此而已。但prettier不同。prettier的处理方案是：删除所有代码原始样式，并通过既定的规则，重新生成AST，然后生成新的代码。用这种方法确保所有输出的代码都符合一致的样式。先看一个简单的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo</span></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>但或许你喜欢注释里方法远一些呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>事实上，如果注释和方法之间插入的都是空白行，在eslint看来，这俩种方法是完全相同的，都不会产生错误。再来看另一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(foo).css().animate().addClass().click()</span><br></pre></td></tr></table></figure>\n<p>但如果你更喜欢这样的写法呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(foo).css()</span><br><span class=\"line\">      .animate()</span><br><span class=\"line\">      .addClass()</span><br><span class=\"line\">      .click()</span><br></pre></td></tr></table></figure>\n<p>很显然，俩种方法都有存在的可能性，但同样的，eslint还是会认为这样都是极好的，不会做任何处理。</p>\n<p>这样的例子其实有很多。因此，eslint的局限性就凸显了出来，我们需要prettier来更加规范我们的代码。prettier的处理方式如上所述，删除你的所有代码样式，然后按照约束的规则，重新生成符合标准的代码。这样一来就保证了无论你的代码以什么样的格式输入，都能保证在prettier解析之后得到的代码是完全一样的。</p>\n<h2 id=\"为什么prettier比eslint更强大，我们我选择单独使用prettier？\"><a href=\"#为什么prettier比eslint更强大，我们我选择单独使用prettier？\" class=\"headerlink\" title=\"为什么prettier比eslint更强大，我们我选择单独使用prettier？\"></a>为什么prettier比eslint更强大，我们我选择单独使用prettier？</h2><p>prettier虽然有更强大的能力，但他只提供了非常少的规则。换句话说，我们使用prettier来生成代码，但生成代码的规则还是由eslint来提供的。</p>\n<h2 id=\"如何使用prettier？\"><a href=\"#如何使用prettier？\" class=\"headerlink\" title=\"如何使用prettier？\"></a>如何使用prettier？</h2><h3 id=\"首先安装prettier\"><a href=\"#首先安装prettier\" class=\"headerlink\" title=\"首先安装prettier\"></a>首先安装prettier</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D eslint-plugin-prettier eslint-config-prettier</span><br></pre></td></tr></table></figure>\n<h3 id=\"然后编辑-eslintrc\"><a href=\"#然后编辑-eslintrc\" class=\"headerlink\" title=\"然后编辑.eslintrc\"></a>然后编辑.eslintrc</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  extends: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"plugin:prettier/recommended\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"string\">'vue'</span>,</span><br><span class=\"line\">    <span class=\"string\">'prettier'</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>rules里可以填写eslint的规则或者eslint-config-prettier的规则。</p>\n<h3 id=\"最后创建-prettierrc文件，写prettier自己的规则：\"><a href=\"#最后创建-prettierrc文件，写prettier自己的规则：\" class=\"headerlink\" title=\"最后创建.prettierrc文件，写prettier自己的规则：\"></a>最后创建.prettierrc文件，写prettier自己的规则：</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\"><span class=\"attr\">\"tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"attr\">\"useTabs\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">\"trailingComma\"</span>: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"bracketSpacing\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"attr\">\"jsxBracketSameLine\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"attr\">\"arrowParens\"</span>: <span class=\"string\">\"avoid\"</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体的规则<a href=\"https://prettier.io/docs/en/options.html\" target=\"_blank\" rel=\"noopener\">看这里</a>。</p>\n<h2 id=\"husky-又是什么东西？\"><a href=\"#husky-又是什么东西？\" class=\"headerlink\" title=\"husky 又是什么东西？\"></a>husky 又是什么东西？</h2><p>husky可以阻止git commit 和git push的操作。我们可以配合使用，只有prettier没有问题时才可以提交git操作。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D lint-staged husky</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  \"scripts\": &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    \"lint\": \"eslint --ext .js,.vue src\",</span><br><span class=\"line\">    \"format\": \"prettier --write \\\"src/**/*.js\\\" \\\"src/**/*.vue\\\"\",</span><br><span class=\"line\">    \"precommit\": \"lint-staged\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"lint-staged\": &#123;</span><br><span class=\"line\">    \"src/**/*.&#123;js,json,css,vue&#125;\": [</span><br><span class=\"line\">      \"prettier --write\",</span><br><span class=\"line\">      \"eslint --fix\",</span><br><span class=\"line\">      <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">      \"pre-commit\": \"npm run lint\",</span><br><span class=\"line\">      \"pre-push\": \"npm test\",</span><br><span class=\"line\">      \"...\": \"...\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里scripts里添加了三个命令，第一个检测src目录下的js文件和vue文件是否符合eslint标准，第二个按照prettier标准格式化src文件夹中的js文件和vue文件，第三条规定在git commit之前调起lint-staged。<br>lint-staged则规定了顺序执行三个命令，先按照prettier规则重写文件，再解决eslint警告，最后添加git文件。</p>\n<p>husky则规定了在commit之前运行lint命令，不通过会报错，无法commit。同样的，push之前也可以做一些操作。更具体的细节<a href=\"https://github.com/typicode/husky\" target=\"_blank\" rel=\"noopener\">看这里</a>。</p>\n","categories":[{"name":"eslint","path":"api/categories/eslint.json"}],"tags":[{"name":"eslint","path":"api/tags/eslint.json"},{"name":"prettier","path":"api/tags/prettier.json"}]}