{"title":"vue3 脚手架（二）","slug":"vite-vue-2","date":"2021-07-01T11:22:04.000Z","updated":"2023-06-21T08:55:09.214Z","comments":true,"path":"api/articles/vite-vue-2.json","excerpt":null,"covers":null,"content":"<blockquote>\n<p>本文仓库地址为: <a href=\"https://github.com/lost-dream/vue3-template\" target=\"_blank\" rel=\"noopener\">vue3-template</a></p>\n</blockquote>\n<h2 id=\"editorconfig\"><a href=\"#editorconfig\" class=\"headerlink\" title=\"editorconfig\"></a>editorconfig</h2><p>每个人都有自己的编辑器习惯，包括<code>mac</code>和<code>windows</code>环境之间编辑器本身也会有很多差异。这个时候需要一份文件统一编辑器格式。所幸现在主流的编辑器全部支持<code>.editorconfig</code>文件。同样的，具体的配置可以自行查阅文档，这里只附上我自己团队的配置。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">PLAIN</span></header><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset=utf-8</span><br><span class=\"line\">end_of_line=lf</span><br><span class=\"line\">insert_final_newline=true</span><br><span class=\"line\">indent_style=space</span><br><span class=\"line\">indent_size=2</span><br><span class=\"line\">max_line_length = 100</span><br><span class=\"line\"></span><br><span class=\"line\">[*.&#123;yml,yaml,json&#125;]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = false</span><br><span class=\"line\"></span><br><span class=\"line\">[Makefile]</span><br><span class=\"line\">indent_style = tab</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"vscode-配置\"><a href=\"#vscode-配置\" class=\"headerlink\" title=\"vscode 配置\"></a>vscode 配置</h2><p>vscode的强大归功于它的插件系统，通过各种插件可以扩展编辑器各种功能。<code>vscode</code>基于<code>js</code>语法开发，它的各种配置都可以通过写入配置文件生效。除了系统配置文件外，还支持项目定制配置。其中系统文件配置的文件，是所有使用vscode项目打开都会生效，称为<code>user</code>，项目定制的配置文件，写在项目根目录<code>.vscode</code>文件夹下，只有当前项目使用vscode 打开时才会生效，称为<code>workspace</code>。<code>.vscode</code>文件夹下通过写入配置文件来扩展各种功能，不同的文件有不同的作用，常用的文件为:</p>\n<ul>\n<li>extensions.json: 推荐扩展列表</li>\n<li>settings.json: 项目专属设置配置信息</li>\n<li>launch.json: 调试配置</li>\n<li>task.json: 任务配置</li>\n<li>xxx.code-snippets: 用户代码片段</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>使用过vscode 的人，应该不需要我再重新强调一遍插件的强大了。这里主要说几个事情:</p>\n<ul>\n<li>我电脑上装了几十个插件，换了电脑开发以后还要重装一遍好麻烦…</li>\n<li>我电脑上装了几十个插件，其中很多插件可以提升开发的效率，我希望我的项目在别人打开时，可以安装那些我认为优秀的插件来提升他人的效率</li>\n<li>我电脑上已经配置了我自己的开发规范，奈何团队项目的规范与我本人不同，该如何保证只在那一个项目中生效别的规则呢？</li>\n</ul>\n<p>关于第一个问题，vscode 有一个好用的插件<a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" target=\"_blank\" rel=\"noopener\">Setting Sync</a>，支持将自己的插件上传到<code>github</code>，新的设备只要同步下来就可以了很方便。你也可以选择执行<code>code --list-extensions | xargs -L 1 echo code --install-extension</code>打印出本地所有的插件，然后在新机器上执行安装全部插件。</p>\n<p>关于第二个问题，通过<code>code --list-extensions</code>打印出所有本地插件之后，可以在<code>.vscode</code>文件夹中新建<code>extensions.json</code>，写入你想要推荐安装的插件名字即可，写法如下:</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JSON</span></header><figure class=\"iseeu highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"recommendations\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"octref.vetur\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>而解决第三个问题当然就是需要在项目的<code>settings.json</code>中覆盖系统的设置。这个文件和系统的设置文件书写格式相同，需要注意的是:</p>\n<ul>\n<li>虽然是<code>json</code>文件，但支持注释，建议写好注释否则插件数量增加导致配置项也增加，看上去会很乱不容易维护</li>\n<li>插件列表中有丰富的插件设置，可以参考文档进行自定义</li>\n<li>项目的配置会覆盖系统的配置</li>\n</ul>\n<h3 id=\"task-launch\"><a href=\"#task-launch\" class=\"headerlink\" title=\"task/launch\"></a>task/launch</h3><p><code>task.json</code>和<code>launch.json</code>更多用于<code>nodeJs</code>后端模块调试，我着重前端方向就不献丑了，具体可以搜索相关配置教程。</p>\n<h3 id=\"用户代码片段\"><a href=\"#用户代码片段\" class=\"headerlink\" title=\"用户代码片段\"></a>用户代码片段</h3><p>比如我最喜欢用的就是 vue 的语法，在<code>系统 -- 首选项 -- 代码片段</code>中，我常常选择创建一些代码片段很方便的创建代码的模板。比如只要输入<code>vue + tab</code> 就可以生成一份 <code>vue</code> 的文件模板，那么这么强大的功能，需要我告诉团队中每个人都在自己电脑上创建一次吗？当然是不需要的。只需要创建<code>vue.code-snippets</code>文件，vscode就会记录这个代码片段，可以直接使用了。具体的片段语法可以<a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets\" target=\"_blank\" rel=\"noopener\">看这里</a>。</p>\n","more":"<blockquote>\n<p>本文仓库地址为: <a href=\"https://github.com/lost-dream/vue3-template\" target=\"_blank\" rel=\"noopener\">vue3-template</a></p>\n</blockquote>\n<h2 id=\"editorconfig\"><a href=\"#editorconfig\" class=\"headerlink\" title=\"editorconfig\"></a>editorconfig</h2><p>每个人都有自己的编辑器习惯，包括<code>mac</code>和<code>windows</code>环境之间编辑器本身也会有很多差异。这个时候需要一份文件统一编辑器格式。所幸现在主流的编辑器全部支持<code>.editorconfig</code>文件。同样的，具体的配置可以自行查阅文档，这里只附上我自己团队的配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset=utf-8</span><br><span class=\"line\">end_of_line=lf</span><br><span class=\"line\">insert_final_newline=true</span><br><span class=\"line\">indent_style=space</span><br><span class=\"line\">indent_size=2</span><br><span class=\"line\">max_line_length = 100</span><br><span class=\"line\"></span><br><span class=\"line\">[*.&#123;yml,yaml,json&#125;]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = false</span><br><span class=\"line\"></span><br><span class=\"line\">[Makefile]</span><br><span class=\"line\">indent_style = tab</span><br></pre></td></tr></table></figure>\n<h2 id=\"vscode-配置\"><a href=\"#vscode-配置\" class=\"headerlink\" title=\"vscode 配置\"></a>vscode 配置</h2><p>vscode的强大归功于它的插件系统，通过各种插件可以扩展编辑器各种功能。<code>vscode</code>基于<code>js</code>语法开发，它的各种配置都可以通过写入配置文件生效。除了系统配置文件外，还支持项目定制配置。其中系统文件配置的文件，是所有使用vscode项目打开都会生效，称为<code>user</code>，项目定制的配置文件，写在项目根目录<code>.vscode</code>文件夹下，只有当前项目使用vscode 打开时才会生效，称为<code>workspace</code>。<code>.vscode</code>文件夹下通过写入配置文件来扩展各种功能，不同的文件有不同的作用，常用的文件为:</p>\n<ul>\n<li>extensions.json: 推荐扩展列表</li>\n<li>settings.json: 项目专属设置配置信息</li>\n<li>launch.json: 调试配置</li>\n<li>task.json: 任务配置</li>\n<li>xxx.code-snippets: 用户代码片段</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>使用过vscode 的人，应该不需要我再重新强调一遍插件的强大了。这里主要说几个事情:</p>\n<ul>\n<li>我电脑上装了几十个插件，换了电脑开发以后还要重装一遍好麻烦…</li>\n<li>我电脑上装了几十个插件，其中很多插件可以提升开发的效率，我希望我的项目在别人打开时，可以安装那些我认为优秀的插件来提升他人的效率</li>\n<li>我电脑上已经配置了我自己的开发规范，奈何团队项目的规范与我本人不同，该如何保证只在那一个项目中生效别的规则呢？</li>\n</ul>\n<p>关于第一个问题，vscode 有一个好用的插件<a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" target=\"_blank\" rel=\"noopener\">Setting Sync</a>，支持将自己的插件上传到<code>github</code>，新的设备只要同步下来就可以了很方便。你也可以选择执行<code>code --list-extensions | xargs -L 1 echo code --install-extension</code>打印出本地所有的插件，然后在新机器上执行安装全部插件。</p>\n<p>关于第二个问题，通过<code>code --list-extensions</code>打印出所有本地插件之后，可以在<code>.vscode</code>文件夹中新建<code>extensions.json</code>，写入你想要推荐安装的插件名字即可，写法如下:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"recommendations\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"octref.vetur\"</span>,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而解决第三个问题当然就是需要在项目的<code>settings.json</code>中覆盖系统的设置。这个文件和系统的设置文件书写格式相同，需要注意的是:</p>\n<ul>\n<li>虽然是<code>json</code>文件，但支持注释，建议写好注释否则插件数量增加导致配置项也增加，看上去会很乱不容易维护</li>\n<li>插件列表中有丰富的插件设置，可以参考文档进行自定义</li>\n<li>项目的配置会覆盖系统的配置</li>\n</ul>\n<h3 id=\"task-launch\"><a href=\"#task-launch\" class=\"headerlink\" title=\"task/launch\"></a>task/launch</h3><p><code>task.json</code>和<code>launch.json</code>更多用于<code>nodeJs</code>后端模块调试，我着重前端方向就不献丑了，具体可以搜索相关配置教程。</p>\n<h3 id=\"用户代码片段\"><a href=\"#用户代码片段\" class=\"headerlink\" title=\"用户代码片段\"></a>用户代码片段</h3><p>比如我最喜欢用的就是 vue 的语法，在<code>系统 -- 首选项 -- 代码片段</code>中，我常常选择创建一些代码片段很方便的创建代码的模板。比如只要输入<code>vue + tab</code> 就可以生成一份 <code>vue</code> 的文件模板，那么这么强大的功能，需要我告诉团队中每个人都在自己电脑上创建一次吗？当然是不需要的。只需要创建<code>vue.code-snippets</code>文件，vscode就会记录这个代码片段，可以直接使用了。具体的片段语法可以<a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets\" target=\"_blank\" rel=\"noopener\">看这里</a>。</p>\n","categories":[{"name":"vue","path":"api/categories/vue.json"}],"tags":[{"name":"vue3","path":"api/tags/vue3.json"},{"name":"vite","path":"api/tags/vite.json"}]}