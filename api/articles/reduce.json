{"title":"试图详解Array.reduce","slug":"reduce","date":"2020-01-15T09:07:34.000Z","updated":"2023-06-21T08:55:09.213Z","comments":true,"path":"api/articles/reduce.json","excerpt":null,"covers":null,"content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>众所周知，reduce 方法是 js 数组中比较高级的用法之一。使用他可以更方便的对数组进行操作。<br>首先来看看 reduce 的官方解释</p>\n<blockquote>\n<p>reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p>\n</blockquote>\n<p>这个解释比较晦涩，但却很精确，在这里你可能依然不懂他要表达什么，但我依然把它写在了开头，希望看完整篇文章后，回头再看这个解释，你能读懂它的意义。</p>\n<h2 id=\"语法详解\"><a href=\"#语法详解\" class=\"headerlink\" title=\"语法详解\"></a>语法详解</h2><p>同样的，我们首先引用官方文档</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  callback: 执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数</span></span><br><span class=\"line\"><span class=\"comment\">    accumulator: 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值</span></span><br><span class=\"line\"><span class=\"comment\">    currentValue: 数组中正在处理的元素</span></span><br><span class=\"line\"><span class=\"comment\">    index: 数组中正在处理的当前元素的索引(可选)。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。</span></span><br><span class=\"line\"><span class=\"comment\">    array: 调用reduce()的数组（可选）</span></span><br><span class=\"line\"><span class=\"comment\">  initialValue: 可选。作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></div>\n<p>对应上面的定义，抛去可选参数，一个简单地使用方式就是这样的</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum, current</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum + current</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">sum, current</span>) =&gt;</span> sum + current)</span><br><span class=\"line\"><span class=\"comment\">// output 10</span></span><br></pre></td></tr></table></figure></div>\n<p>上面例子的结果会返回十。我们来看看发生了什么。reduce 函数会将整个操作分步骤来执行。你可以理解为 for 循环。他会把每一个步骤拆解开来去运算，把每一步的结果 return，作为下一步操作的初始值。上面例子在第一步操作时，首先返回了<code>arr</code>中的第一个值（你可以理解为 for 循环的第一步），也就是1。之后，函数将第一步 return 的值累计到初始值中，作为下一步操作的初始值，这是，<code>sum</code>的值已经变成了 1，而 current 的值也变成了循环中的下一个，也就是 2。在这一步骤中，函数执行了加法处理，返回了<code>1 + 2</code>，这个值又变成了下一个步骤中的 sum，而 current 也变成了 arr[3]，之后又会执行上述的操作。没错，说了这么多，上面的例子只是 <code>1+2+3+4</code>而已。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// step1: sum = 0, current = 1</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> sum + current  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// step2: sum = 1, current = 2</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> sum + current <span class=\"comment\">// 1 + 2</span></span><br><span class=\"line\"><span class=\"comment\">// step3: sum = 1 + 2, current = 3</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> sum + current <span class=\"comment\">// 1 + 2 + 3</span></span><br><span class=\"line\"><span class=\"comment\">// step4: sum = 1 + 2 + 3, current = 4</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> sum + current <span class=\"comment\">// 1 + 2 + 3 + 4</span></span><br></pre></td></tr></table></figure></div>\n<p>就是这样。<br>而<code>initialValue</code>则表示运算的初始值。假如上面的例子加上一个初始值</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">sum, current</span>) =&gt;</span> sum + current, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//output 10+1+2+3+4 = 20</span></span><br></pre></td></tr></table></figure></div>\n<p>这就是初始值的用法。reduce 的用法其实就已经说完了。你可以滑到最开始定义的地方，重新去看一下定义，是不是有点理解了？</p>\n<h2 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h2><p>reduce 当然不止可以处理加法运算，事实上任何数组相关的操作都可以用 reduce 来解决。面对更加复杂的场景，有两点点是新手容易理解错误的：一是 reduce 函数必须要有返回值，二是<strong>accumulator的值是上一次的初始值，currentValue才是被迭代数组的每一项</strong>。<br>新手常会和 js 中循环的概念混淆。这里回调函数中的两个参数并不是都是操作的数组中的值。这也是后续在复杂场景中使用 reduce 唯一需要注意的地方，再举一个例子</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设有一张人员表，你需要把所有女性保存出来（sex: 0 =&gt; 女; 1 =&gt; 男）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'王五'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'赵六'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'马七'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">person.reduce(<span class=\"function\">(<span class=\"params\">res, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (current.sex === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    res.push(current.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;, [])</span><br><span class=\"line\"><span class=\"comment\">// output ['张三', '王五', '赵六']</span></span><br></pre></td></tr></table></figure></div>\n<p>上面例子中，需要注意的是，回调函数中的<code>current</code>指的是<code>person</code>中被迭代的每一项，而 <code>res</code>指的是被赋予的初始值<code>[]</code>，这样你能理解了吗？</p>\n<h2 id=\"几个例子，加固理解\"><a href=\"#几个例子，加固理解\" class=\"headerlink\" title=\"几个例子，加固理解\"></a>几个例子，加固理解</h2><p>正如我上面所说，reduce的用法异常广泛，几乎任何场景都可以使用。所以我没有办法对应应用场景作解释，只能附加几个比较复杂的场景供你参考和巩固，希望对你有些许帮助。</p>\n<h3 id=\"还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组\"><a href=\"#还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组\" class=\"headerlink\" title=\"还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组\"></a>还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组</h3><div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'aa'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'bb'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'cc'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'dd'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'ee'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'ff'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> score = &#123;</span><br><span class=\"line\">  aa: <span class=\"number\">60</span>,</span><br><span class=\"line\">  bb: <span class=\"number\">70</span>,</span><br><span class=\"line\">  cc: <span class=\"number\">80</span>,</span><br><span class=\"line\">  dd: <span class=\"number\">90</span>,</span><br><span class=\"line\">  ee: <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person.reduce(<span class=\"function\">(<span class=\"params\">res, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> key = current.name</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (score[key]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 score 中有对应人名的分数，添加到 score 字段上，否则 score = 0</span></span><br><span class=\"line\">    current.score = score[key]</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    current.score = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.push(current)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;, [])</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"aa\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">60</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"bb\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">70</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"cc\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">80</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"dd\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">90</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"ee\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"ff\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"使用-reduce-实现-groupBy方法\"><a href=\"#使用-reduce-实现-groupBy方法\" class=\"headerlink\" title=\"使用 reduce 实现 groupBy方法\"></a>使用 reduce 实现 groupBy方法</h3><p>lodash 有一个方法叫做 groupBy</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">6.1</span>, <span class=\"number\">4.2</span>, <span class=\"number\">6.3</span>];</span><br><span class=\"line\">_.groupBy(numbers, <span class=\"built_in\">Math</span>.floor);</span><br><span class=\"line\"><span class=\"comment\">// 返回 &#123;'4': [4.2], '6': [6.1, 6.3]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> words = [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">_.groupBy(words, <span class=\"string\">'length'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 返回 &#123;'3': ['one', 'two'], '5': ['three']&#125;</span></span><br></pre></td></tr></table></figure></div>\n<p>使用 reduce 实现同样的效果</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">groupBy</span> (<span class=\"params\">arr, criteria</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">obj, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断criteria是函数还是属性名</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"keyword\">typeof</span> criteria === <span class=\"string\">'function'</span> ? criteria(item) : item[criteria]</span><br><span class=\"line\">    <span class=\"comment\">// 如果属性不存在，则创建一个</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      obj[key] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将元素加入数组</span></span><br><span class=\"line\">    obj[key].push(item)</span><br><span class=\"line\">    <span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;, &#123;&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n","more":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>众所周知，reduce 方法是 js 数组中比较高级的用法之一。使用他可以更方便的对数组进行操作。<br>首先来看看 reduce 的官方解释</p>\n<blockquote>\n<p>reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p>\n</blockquote>\n<p>这个解释比较晦涩，但却很精确，在这里你可能依然不懂他要表达什么，但我依然把它写在了开头，希望看完整篇文章后，回头再看这个解释，你能读懂它的意义。</p>\n<h2 id=\"语法详解\"><a href=\"#语法详解\" class=\"headerlink\" title=\"语法详解\"></a>语法详解</h2><p>同样的，我们首先引用官方文档</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  callback: 执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数</span></span><br><span class=\"line\"><span class=\"comment\">    accumulator: 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值</span></span><br><span class=\"line\"><span class=\"comment\">    currentValue: 数组中正在处理的元素</span></span><br><span class=\"line\"><span class=\"comment\">    index: 数组中正在处理的当前元素的索引(可选)。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。</span></span><br><span class=\"line\"><span class=\"comment\">    array: 调用reduce()的数组（可选）</span></span><br><span class=\"line\"><span class=\"comment\">  initialValue: 可选。作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>对应上面的定义，抛去可选参数，一个简单地使用方式就是这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum, current</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum + current</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">sum, current</span>) =&gt;</span> sum + current)</span><br><span class=\"line\"><span class=\"comment\">// output 10</span></span><br></pre></td></tr></table></figure>\n<p>上面例子的结果会返回十。我们来看看发生了什么。reduce 函数会将整个操作分步骤来执行。你可以理解为 for 循环。他会把每一个步骤拆解开来去运算，把每一步的结果 return，作为下一步操作的初始值。上面例子在第一步操作时，首先返回了<code>arr</code>中的第一个值（你可以理解为 for 循环的第一步），也就是1。之后，函数将第一步 return 的值累计到初始值中，作为下一步操作的初始值，这是，<code>sum</code>的值已经变成了 1，而 current 的值也变成了循环中的下一个，也就是 2。在这一步骤中，函数执行了加法处理，返回了<code>1 + 2</code>，这个值又变成了下一个步骤中的 sum，而 current 也变成了 arr[3]，之后又会执行上述的操作。没错，说了这么多，上面的例子只是 <code>1+2+3+4</code>而已。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// step1: sum = 0, current = 1</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> sum + current  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// step2: sum = 1, current = 2</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> sum + current <span class=\"comment\">// 1 + 2</span></span><br><span class=\"line\"><span class=\"comment\">// step3: sum = 1 + 2, current = 3</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> sum + current <span class=\"comment\">// 1 + 2 + 3</span></span><br><span class=\"line\"><span class=\"comment\">// step4: sum = 1 + 2 + 3, current = 4</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> sum + current <span class=\"comment\">// 1 + 2 + 3 + 4</span></span><br></pre></td></tr></table></figure>\n<p>就是这样。<br>而<code>initialValue</code>则表示运算的初始值。假如上面的例子加上一个初始值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">sum, current</span>) =&gt;</span> sum + current, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//output 10+1+2+3+4 = 20</span></span><br></pre></td></tr></table></figure>\n<p>这就是初始值的用法。reduce 的用法其实就已经说完了。你可以滑到最开始定义的地方，重新去看一下定义，是不是有点理解了？</p>\n<h2 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h2><p>reduce 当然不止可以处理加法运算，事实上任何数组相关的操作都可以用 reduce 来解决。面对更加复杂的场景，有两点点是新手容易理解错误的：一是 reduce 函数必须要有返回值，二是<strong>accumulator的值是上一次的初始值，currentValue才是被迭代数组的每一项</strong>。<br>新手常会和 js 中循环的概念混淆。这里回调函数中的两个参数并不是都是操作的数组中的值。这也是后续在复杂场景中使用 reduce 唯一需要注意的地方，再举一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设有一张人员表，你需要把所有女性保存出来（sex: 0 =&gt; 女; 1 =&gt; 男）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'王五'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'赵六'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'马七'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">person.reduce(<span class=\"function\">(<span class=\"params\">res, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (current.sex === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    res.push(current.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;, [])</span><br><span class=\"line\"><span class=\"comment\">// output ['张三', '王五', '赵六']</span></span><br></pre></td></tr></table></figure>\n<p>上面例子中，需要注意的是，回调函数中的<code>current</code>指的是<code>person</code>中被迭代的每一项，而 <code>res</code>指的是被赋予的初始值<code>[]</code>，这样你能理解了吗？</p>\n<h2 id=\"几个例子，加固理解\"><a href=\"#几个例子，加固理解\" class=\"headerlink\" title=\"几个例子，加固理解\"></a>几个例子，加固理解</h2><p>正如我上面所说，reduce的用法异常广泛，几乎任何场景都可以使用。所以我没有办法对应应用场景作解释，只能附加几个比较复杂的场景供你参考和巩固，希望对你有些许帮助。</p>\n<h3 id=\"还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组\"><a href=\"#还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组\" class=\"headerlink\" title=\"还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组\"></a>还是上面人名的例子，比如现在有一张单独的成绩单，我们需要将两个数组整合为一个数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'aa'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'bb'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'cc'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'dd'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'ee'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'ff'</span>, <span class=\"attr\">sex</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> score = &#123;</span><br><span class=\"line\">  aa: <span class=\"number\">60</span>,</span><br><span class=\"line\">  bb: <span class=\"number\">70</span>,</span><br><span class=\"line\">  cc: <span class=\"number\">80</span>,</span><br><span class=\"line\">  dd: <span class=\"number\">90</span>,</span><br><span class=\"line\">  ee: <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person.reduce(<span class=\"function\">(<span class=\"params\">res, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> key = current.name</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (score[key]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 score 中有对应人名的分数，添加到 score 字段上，否则 score = 0</span></span><br><span class=\"line\">    current.score = score[key]</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    current.score = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.push(current)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;, [])</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"aa\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">60</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"bb\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">70</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"cc\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">80</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"dd\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">90</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"ee\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"ff\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"number\">0</span>,<span class=\"string\">\"score\"</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-reduce-实现-groupBy方法\"><a href=\"#使用-reduce-实现-groupBy方法\" class=\"headerlink\" title=\"使用 reduce 实现 groupBy方法\"></a>使用 reduce 实现 groupBy方法</h3><p>lodash 有一个方法叫做 groupBy</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">6.1</span>, <span class=\"number\">4.2</span>, <span class=\"number\">6.3</span>];</span><br><span class=\"line\">_.groupBy(numbers, <span class=\"built_in\">Math</span>.floor);</span><br><span class=\"line\"><span class=\"comment\">// 返回 &#123;'4': [4.2], '6': [6.1, 6.3]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> words = [<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">_.groupBy(words, <span class=\"string\">'length'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 返回 &#123;'3': ['one', 'two'], '5': ['three']&#125;</span></span><br></pre></td></tr></table></figure>\n<p>使用 reduce 实现同样的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">groupBy</span> (<span class=\"params\">arr, criteria</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">obj, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断criteria是函数还是属性名</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"keyword\">typeof</span> criteria === <span class=\"string\">'function'</span> ? criteria(item) : item[criteria]</span><br><span class=\"line\">    <span class=\"comment\">// 如果属性不存在，则创建一个</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      obj[key] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将元素加入数组</span></span><br><span class=\"line\">    obj[key].push(item)</span><br><span class=\"line\">    <span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;, &#123;&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"javascript","path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","path":"api/tags/javascript.json"}]}