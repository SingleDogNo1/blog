{"title":"git命令","slug":"git命令","date":"2017-09-25T02:10:23.000Z","updated":"2023-06-21T08:55:09.213Z","comments":true,"path":"api/articles/git命令.json","excerpt":null,"covers":null,"content":"<blockquote>\n<p>本博客旨在记录常用git命令。如果希望得到更多关于git的知识，请移步到<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的git教程</a>，有非常详细的教程资料。</p>\n</blockquote>\n<h2 id=\"添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件\"><a href=\"#添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件\" class=\"headerlink\" title=\"添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件\"></a>添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件</h2><ul>\n<li>git help &lt;command&gt; &nbsp;&nbsp;&nbsp;&nbsp; 显示command的帮助文档</li>\n<li>git show (commitID) &nbsp;&nbsp;&nbsp;&nbsp; 显示最近一次（某一次）提交的内容详情</li>\n<li>git co – <file> &nbsp;&nbsp;&nbsp;&nbsp; 抛弃工作区某一文件的修改</file></li>\n<li>git co . &nbsp;&nbsp;&nbsp;&nbsp; 抛弃工作区修改</li>\n<li>git add <file> &nbsp;&nbsp;&nbsp;&nbsp; 将工作文件修改提交到本地暂存区</file></li>\n<li>git add . &nbsp;&nbsp;&nbsp;&nbsp; 将所有修改过的工作文件提交暂存区</li>\n<li>git rm <file> &nbsp;&nbsp;&nbsp;&nbsp; 从版本库中删除文件</file></li>\n<li>git rm <file> –cached &nbsp;&nbsp;&nbsp;&nbsp; 从版本库中删除文件，但不删除本地文件</file></li>\n<li>git reset <file> &nbsp;&nbsp;&nbsp;&nbsp; 从暂存区恢复到工作文件</file></li>\n<li>git reset – . &nbsp;&nbsp;&nbsp;&nbsp; 从暂存区恢复到工作文件</li>\n<li>git reset –hard &nbsp;&nbsp;&nbsp;&nbsp; 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</li>\n<li>git ci <file> git ci . git ci -a &nbsp;&nbsp;&nbsp;&nbsp; 将git add, git rm和git ci等操作都合并在一起做git ci -am “some comments”</file></li>\n<li>git ci –amend &nbsp;&nbsp;&nbsp;&nbsp; 修改最后一次提交记录</li>\n<li>git revert <commitid> &nbsp;&nbsp;&nbsp;&nbsp; 恢复某次提交的状态，恢复动作本身也创建次提交对象</commitid></li>\n<li>git revert HEAD &nbsp;&nbsp;&nbsp;&nbsp; 恢复最后一次提交的状态</li>\n</ul>\n<h2 id=\"查看文件diff\"><a href=\"#查看文件diff\" class=\"headerlink\" title=\"查看文件diff\"></a>查看文件diff</h2><ul>\n<li>git diff <file> &nbsp;&nbsp;&nbsp;&nbsp; 比较当前文件和暂存区文件差异 git diff</file></li>\n<li>git diff <id1><id2> &nbsp;&nbsp;&nbsp;&nbsp; 比较两次提交之间的差异</id2></id1></li>\n<li>git diff <branch1>..<branch2> &nbsp;&nbsp;&nbsp;&nbsp; 在两个分支之间比较</branch2></branch1></li>\n<li>git diff –staged &nbsp;&nbsp;&nbsp;&nbsp; 比较暂存区和版本库差异</li>\n<li>git diff –cached &nbsp;&nbsp;&nbsp;&nbsp; 比较暂存区和版本库差异</li>\n<li>git diff –stat &nbsp;&nbsp;&nbsp;&nbsp; 仅仅比较统计信息</li>\n</ul>\n<h2 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h2><ul>\n<li>git log git log <file> &nbsp;&nbsp;&nbsp;&nbsp; 查看该文件每次提交记录</file></li>\n<li>git log -p <file> &nbsp;&nbsp;&nbsp;&nbsp; 查看每次详细修改内容的diff</file></li>\n<li>git log -p -2 &nbsp;&nbsp;&nbsp;&nbsp; 查看最近两次详细修改内容的diff</li>\n<li>git log –stat &nbsp;&nbsp;&nbsp;&nbsp;查看提交统计信息</li>\n</ul>\n<h2 id=\"Git-本地分支管理\"><a href=\"#Git-本地分支管理\" class=\"headerlink\" title=\"Git 本地分支管理\"></a>Git 本地分支管理</h2><h3 id=\"查看、切换、创建和删除分支\"><a href=\"#查看、切换、创建和删除分支\" class=\"headerlink\" title=\"查看、切换、创建和删除分支\"></a>查看、切换、创建和删除分支</h3><ul>\n<li>git branch -r &nbsp;&nbsp;&nbsp;&nbsp; 查看远程分支</li>\n<li>git branch &lt;new_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建新的分支</li>\n<li>git branch -v &nbsp;&nbsp;&nbsp;&nbsp; 查看各个分支最后提交信息</li>\n<li>git branch –merged &nbsp;&nbsp;&nbsp;&nbsp; 查看已经被合并到当前分支的分支</li>\n<li>git branch –no-merged &nbsp;&nbsp;&nbsp;&nbsp; 查看尚未被合并到当前分支的分支</li>\n<li>git checkout <branch> &nbsp;&nbsp;&nbsp;&nbsp; 切换到某个分支</branch></li>\n<li>git checkout -b &lt;new_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建新的分支，并且切换过去</li>\n<li>git checkout -b &lt;new_branch&gt; <branch> &nbsp;&nbsp;&nbsp;&nbsp; 基于branch创建新的new_branch</branch></li>\n<li>git checkout commitID &nbsp;&nbsp;&nbsp;&nbsp; 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</li>\n<li>git checkout commitID -b &lt;new_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 把某次历史提交记录checkout出来，创建成一个分支</li>\n<li>git branch -d <branch> &nbsp;&nbsp;&nbsp;&nbsp; 删除某个分支</branch></li>\n<li>git branch -D <branch> &nbsp;&nbsp;&nbsp;&nbsp; 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</branch></li>\n</ul>\n<h2 id=\"分支合并和rebase\"><a href=\"#分支合并和rebase\" class=\"headerlink\" title=\"分支合并和rebase\"></a>分支合并和rebase</h2><ul>\n<li>git merge <branch> &nbsp;&nbsp;&nbsp;&nbsp; 将branch分支合并到当前分支</branch></li>\n<li>git merge origin/master –no-ff &nbsp;&nbsp;&nbsp;&nbsp; 不要Fast-Foward合并，这样可以生成merge提交</li>\n<li>git rebase master <branch> &nbsp;&nbsp;&nbsp;&nbsp; 将master rebase到branch，相当于： git co <branch> &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge <branch></branch></branch></branch></li>\n</ul>\n<h2 id=\"Git补丁管理-方便在多台机器上开发同步时用\"><a href=\"#Git补丁管理-方便在多台机器上开发同步时用\" class=\"headerlink\" title=\"Git补丁管理(方便在多台机器上开发同步时用)\"></a>Git补丁管理(方便在多台机器上开发同步时用)</h2><ul>\n<li>git diff &gt; ../sync.patch &nbsp;&nbsp;&nbsp;&nbsp; 生成补丁</li>\n<li>git apply ../sync.patch &nbsp;&nbsp;&nbsp;&nbsp; 打补丁</li>\n<li>git apply –check ../sync.patch &nbsp;&nbsp;&nbsp;&nbsp;测试补丁能否成功</li>\n</ul>\n<h2 id=\"Git暂存管理\"><a href=\"#Git暂存管理\" class=\"headerlink\" title=\"Git暂存管理\"></a>Git暂存管理</h2><ul>\n<li>git stash &nbsp;&nbsp;&nbsp;&nbsp; 暂存</li>\n<li>git stash list &nbsp;&nbsp;&nbsp;&nbsp; 列出所有stash</li>\n<li>git stash apply &nbsp;&nbsp;&nbsp;&nbsp; 恢复暂存的内容</li>\n<li>git stash drop &nbsp;&nbsp;&nbsp;&nbsp; 删除暂存区</li>\n</ul>\n<h2 id=\"Git远程分支管理\"><a href=\"#Git远程分支管理\" class=\"headerlink\" title=\"Git远程分支管理\"></a>Git远程分支管理</h2><ul>\n<li>git pull &nbsp;&nbsp;&nbsp;&nbsp; 抓取远程仓库所有分支更新并合并到本地</li>\n<li>git pull –no-ff &nbsp;&nbsp;&nbsp;&nbsp; 抓取远程仓库所有分支更新并合并到本地，不要快进合并</li>\n<li>git fetch origin &nbsp;&nbsp;&nbsp;&nbsp; 抓取远程仓库更新</li>\n<li>git merge origin/master &nbsp;&nbsp;&nbsp;&nbsp; 将远程主分支合并到本地当前分支</li>\n<li>git co –track origin/branch &nbsp;&nbsp;&nbsp;&nbsp; 跟踪某个远程分支创建相应的本地分支</li>\n<li>git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 基于远程分支创建本地分支，功能同上</li>\n<li>git push &nbsp;&nbsp;&nbsp;&nbsp; push所有分支</li>\n<li>git push origin master &nbsp;&nbsp;&nbsp;&nbsp; 将本地主分支推到远程主分支</li>\n<li>git push -u origin master &nbsp;&nbsp;&nbsp;&nbsp; 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</li>\n<li>git push origin &lt;local_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建远程分支， origin是远程仓库名</li>\n<li>git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建远程分支</li>\n<li>git push origin :&lt;remote_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp;先删除本地分支(git br -d <branch>)，然后再push删除远程分支</branch></li>\n</ul>\n<h2 id=\"Git远程仓库管理\"><a href=\"#Git远程仓库管理\" class=\"headerlink\" title=\"Git远程仓库管理\"></a>Git远程仓库管理</h2><h3 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h3><ul>\n<li>git remote -v &nbsp;&nbsp;&nbsp;&nbsp; 查看远程服务器地址和仓库名称</li>\n<li>git remote show origin &nbsp;&nbsp;&nbsp;&nbsp; 查看远程服务器仓库状态</li>\n<li>git remote add origin git@ github:####/####.git &nbsp;&nbsp;&nbsp;&nbsp; 添加远程仓库地址</li>\n<li>git remote set-url origin git@ github.com:####/####.git &nbsp;&nbsp;&nbsp;&nbsp; 设置远程仓库地址(用于修改远程仓库地址)</li>\n<li>git remote rm <repository> &nbsp;&nbsp;&nbsp;&nbsp; 删除远程仓库</repository></li>\n</ul>\n<h2 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h2><ul>\n<li>git clone –bare robbin_site robbin_site.git &nbsp;&nbsp;&nbsp;&nbsp; 用带版本的项目创建纯版本仓库</li>\n<li>scp -r my_project.git git@ git.csdn.net:~ &nbsp;&nbsp;&nbsp;&nbsp; 将纯仓库上传到服务器上</li>\n<li>mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init &nbsp;&nbsp;&nbsp;&nbsp; 在服务器创建纯仓库</li>\n<li>git remote add origin git@ github.com:robbin/robbin_site.git &nbsp;&nbsp;&nbsp;&nbsp; 设置远程仓库地址</li>\n<li>git push -u origin master &nbsp;&nbsp;&nbsp;&nbsp; 客户端首次提交</li>\n<li>git push -u origin develop &nbsp;&nbsp;&nbsp;&nbsp; 首次将本地develop分支提交到远程develop分支，并且track</li>\n<li>git remote set-head origin master &nbsp;&nbsp;&nbsp;&nbsp; 设置远程仓库的HEAD指向master分支</li>\n</ul>\n<h2 id=\"设置跟踪远程库和本地库\"><a href=\"#设置跟踪远程库和本地库\" class=\"headerlink\" title=\"设置跟踪远程库和本地库\"></a>设置跟踪远程库和本地库</h2><ul>\n<li>git branch –set-upstream master origin/master</li>\n<li>git branch –set-upstream develop origin/develop</li>\n</ul>\n","more":"<blockquote>\n<p>本博客旨在记录常用git命令。如果希望得到更多关于git的知识，请移步到<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的git教程</a>，有非常详细的教程资料。</p>\n</blockquote>\n<h2 id=\"添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件\"><a href=\"#添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件\" class=\"headerlink\" title=\"添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件\"></a>添加文件、查看状态、删除文件、提交文件、找回文件，重置修改文件</h2><ul>\n<li>git help &lt;command&gt; &nbsp;&nbsp;&nbsp;&nbsp; 显示command的帮助文档</li>\n<li>git show (commitID) &nbsp;&nbsp;&nbsp;&nbsp; 显示最近一次（某一次）提交的内容详情</li>\n<li>git co – <file> &nbsp;&nbsp;&nbsp;&nbsp; 抛弃工作区某一文件的修改</file></li>\n<li>git co . &nbsp;&nbsp;&nbsp;&nbsp; 抛弃工作区修改</li>\n<li>git add <file> &nbsp;&nbsp;&nbsp;&nbsp; 将工作文件修改提交到本地暂存区</file></li>\n<li>git add . &nbsp;&nbsp;&nbsp;&nbsp; 将所有修改过的工作文件提交暂存区</li>\n<li>git rm <file> &nbsp;&nbsp;&nbsp;&nbsp; 从版本库中删除文件</file></li>\n<li>git rm <file> –cached &nbsp;&nbsp;&nbsp;&nbsp; 从版本库中删除文件，但不删除本地文件</file></li>\n<li>git reset <file> &nbsp;&nbsp;&nbsp;&nbsp; 从暂存区恢复到工作文件</file></li>\n<li>git reset – . &nbsp;&nbsp;&nbsp;&nbsp; 从暂存区恢复到工作文件</li>\n<li>git reset –hard &nbsp;&nbsp;&nbsp;&nbsp; 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</li>\n<li>git ci <file> git ci . git ci -a &nbsp;&nbsp;&nbsp;&nbsp; 将git add, git rm和git ci等操作都合并在一起做git ci -am “some comments”</file></li>\n<li>git ci –amend &nbsp;&nbsp;&nbsp;&nbsp; 修改最后一次提交记录</li>\n<li>git revert <commitid> &nbsp;&nbsp;&nbsp;&nbsp; 恢复某次提交的状态，恢复动作本身也创建次提交对象</commitid></li>\n<li>git revert HEAD &nbsp;&nbsp;&nbsp;&nbsp; 恢复最后一次提交的状态</li>\n</ul>\n<h2 id=\"查看文件diff\"><a href=\"#查看文件diff\" class=\"headerlink\" title=\"查看文件diff\"></a>查看文件diff</h2><ul>\n<li>git diff <file> &nbsp;&nbsp;&nbsp;&nbsp; 比较当前文件和暂存区文件差异 git diff</file></li>\n<li>git diff <id1><id2> &nbsp;&nbsp;&nbsp;&nbsp; 比较两次提交之间的差异</id2></id1></li>\n<li>git diff <branch1>..<branch2> &nbsp;&nbsp;&nbsp;&nbsp; 在两个分支之间比较</branch2></branch1></li>\n<li>git diff –staged &nbsp;&nbsp;&nbsp;&nbsp; 比较暂存区和版本库差异</li>\n<li>git diff –cached &nbsp;&nbsp;&nbsp;&nbsp; 比较暂存区和版本库差异</li>\n<li>git diff –stat &nbsp;&nbsp;&nbsp;&nbsp; 仅仅比较统计信息</li>\n</ul>\n<h2 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h2><ul>\n<li>git log git log <file> &nbsp;&nbsp;&nbsp;&nbsp; 查看该文件每次提交记录</file></li>\n<li>git log -p <file> &nbsp;&nbsp;&nbsp;&nbsp; 查看每次详细修改内容的diff</file></li>\n<li>git log -p -2 &nbsp;&nbsp;&nbsp;&nbsp; 查看最近两次详细修改内容的diff</li>\n<li>git log –stat &nbsp;&nbsp;&nbsp;&nbsp;查看提交统计信息</li>\n</ul>\n<h2 id=\"Git-本地分支管理\"><a href=\"#Git-本地分支管理\" class=\"headerlink\" title=\"Git 本地分支管理\"></a>Git 本地分支管理</h2><h3 id=\"查看、切换、创建和删除分支\"><a href=\"#查看、切换、创建和删除分支\" class=\"headerlink\" title=\"查看、切换、创建和删除分支\"></a>查看、切换、创建和删除分支</h3><ul>\n<li>git branch -r &nbsp;&nbsp;&nbsp;&nbsp; 查看远程分支</li>\n<li>git branch &lt;new_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建新的分支</li>\n<li>git branch -v &nbsp;&nbsp;&nbsp;&nbsp; 查看各个分支最后提交信息</li>\n<li>git branch –merged &nbsp;&nbsp;&nbsp;&nbsp; 查看已经被合并到当前分支的分支</li>\n<li>git branch –no-merged &nbsp;&nbsp;&nbsp;&nbsp; 查看尚未被合并到当前分支的分支</li>\n<li>git checkout <branch> &nbsp;&nbsp;&nbsp;&nbsp; 切换到某个分支</branch></li>\n<li>git checkout -b &lt;new_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建新的分支，并且切换过去</li>\n<li>git checkout -b &lt;new_branch&gt; <branch> &nbsp;&nbsp;&nbsp;&nbsp; 基于branch创建新的new_branch</branch></li>\n<li>git checkout commitID &nbsp;&nbsp;&nbsp;&nbsp; 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</li>\n<li>git checkout commitID -b &lt;new_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 把某次历史提交记录checkout出来，创建成一个分支</li>\n<li>git branch -d <branch> &nbsp;&nbsp;&nbsp;&nbsp; 删除某个分支</branch></li>\n<li>git branch -D <branch> &nbsp;&nbsp;&nbsp;&nbsp; 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</branch></li>\n</ul>\n<h2 id=\"分支合并和rebase\"><a href=\"#分支合并和rebase\" class=\"headerlink\" title=\"分支合并和rebase\"></a>分支合并和rebase</h2><ul>\n<li>git merge <branch> &nbsp;&nbsp;&nbsp;&nbsp; 将branch分支合并到当前分支</branch></li>\n<li>git merge origin/master –no-ff &nbsp;&nbsp;&nbsp;&nbsp; 不要Fast-Foward合并，这样可以生成merge提交</li>\n<li>git rebase master <branch> &nbsp;&nbsp;&nbsp;&nbsp; 将master rebase到branch，相当于： git co <branch> &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge <branch></branch></branch></branch></li>\n</ul>\n<h2 id=\"Git补丁管理-方便在多台机器上开发同步时用\"><a href=\"#Git补丁管理-方便在多台机器上开发同步时用\" class=\"headerlink\" title=\"Git补丁管理(方便在多台机器上开发同步时用)\"></a>Git补丁管理(方便在多台机器上开发同步时用)</h2><ul>\n<li>git diff &gt; ../sync.patch &nbsp;&nbsp;&nbsp;&nbsp; 生成补丁</li>\n<li>git apply ../sync.patch &nbsp;&nbsp;&nbsp;&nbsp; 打补丁</li>\n<li>git apply –check ../sync.patch &nbsp;&nbsp;&nbsp;&nbsp;测试补丁能否成功</li>\n</ul>\n<h2 id=\"Git暂存管理\"><a href=\"#Git暂存管理\" class=\"headerlink\" title=\"Git暂存管理\"></a>Git暂存管理</h2><ul>\n<li>git stash &nbsp;&nbsp;&nbsp;&nbsp; 暂存</li>\n<li>git stash list &nbsp;&nbsp;&nbsp;&nbsp; 列出所有stash</li>\n<li>git stash apply &nbsp;&nbsp;&nbsp;&nbsp; 恢复暂存的内容</li>\n<li>git stash drop &nbsp;&nbsp;&nbsp;&nbsp; 删除暂存区</li>\n</ul>\n<h2 id=\"Git远程分支管理\"><a href=\"#Git远程分支管理\" class=\"headerlink\" title=\"Git远程分支管理\"></a>Git远程分支管理</h2><ul>\n<li>git pull &nbsp;&nbsp;&nbsp;&nbsp; 抓取远程仓库所有分支更新并合并到本地</li>\n<li>git pull –no-ff &nbsp;&nbsp;&nbsp;&nbsp; 抓取远程仓库所有分支更新并合并到本地，不要快进合并</li>\n<li>git fetch origin &nbsp;&nbsp;&nbsp;&nbsp; 抓取远程仓库更新</li>\n<li>git merge origin/master &nbsp;&nbsp;&nbsp;&nbsp; 将远程主分支合并到本地当前分支</li>\n<li>git co –track origin/branch &nbsp;&nbsp;&nbsp;&nbsp; 跟踪某个远程分支创建相应的本地分支</li>\n<li>git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 基于远程分支创建本地分支，功能同上</li>\n<li>git push &nbsp;&nbsp;&nbsp;&nbsp; push所有分支</li>\n<li>git push origin master &nbsp;&nbsp;&nbsp;&nbsp; 将本地主分支推到远程主分支</li>\n<li>git push -u origin master &nbsp;&nbsp;&nbsp;&nbsp; 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</li>\n<li>git push origin &lt;local_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建远程分支， origin是远程仓库名</li>\n<li>git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp; 创建远程分支</li>\n<li>git push origin :&lt;remote_branch&gt; &nbsp;&nbsp;&nbsp;&nbsp;先删除本地分支(git br -d <branch>)，然后再push删除远程分支</branch></li>\n</ul>\n<h2 id=\"Git远程仓库管理\"><a href=\"#Git远程仓库管理\" class=\"headerlink\" title=\"Git远程仓库管理\"></a>Git远程仓库管理</h2><h3 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h3><ul>\n<li>git remote -v &nbsp;&nbsp;&nbsp;&nbsp; 查看远程服务器地址和仓库名称</li>\n<li>git remote show origin &nbsp;&nbsp;&nbsp;&nbsp; 查看远程服务器仓库状态</li>\n<li>git remote add origin git@ github:####/####.git &nbsp;&nbsp;&nbsp;&nbsp; 添加远程仓库地址</li>\n<li>git remote set-url origin git@ github.com:####/####.git &nbsp;&nbsp;&nbsp;&nbsp; 设置远程仓库地址(用于修改远程仓库地址)</li>\n<li>git remote rm <repository> &nbsp;&nbsp;&nbsp;&nbsp; 删除远程仓库</repository></li>\n</ul>\n<h2 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h2><ul>\n<li>git clone –bare robbin_site robbin_site.git &nbsp;&nbsp;&nbsp;&nbsp; 用带版本的项目创建纯版本仓库</li>\n<li>scp -r my_project.git git@ git.csdn.net:~ &nbsp;&nbsp;&nbsp;&nbsp; 将纯仓库上传到服务器上</li>\n<li>mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init &nbsp;&nbsp;&nbsp;&nbsp; 在服务器创建纯仓库</li>\n<li>git remote add origin git@ github.com:robbin/robbin_site.git &nbsp;&nbsp;&nbsp;&nbsp; 设置远程仓库地址</li>\n<li>git push -u origin master &nbsp;&nbsp;&nbsp;&nbsp; 客户端首次提交</li>\n<li>git push -u origin develop &nbsp;&nbsp;&nbsp;&nbsp; 首次将本地develop分支提交到远程develop分支，并且track</li>\n<li>git remote set-head origin master &nbsp;&nbsp;&nbsp;&nbsp; 设置远程仓库的HEAD指向master分支</li>\n</ul>\n<h2 id=\"设置跟踪远程库和本地库\"><a href=\"#设置跟踪远程库和本地库\" class=\"headerlink\" title=\"设置跟踪远程库和本地库\"></a>设置跟踪远程库和本地库</h2><ul>\n<li>git branch –set-upstream master origin/master</li>\n<li>git branch –set-upstream develop origin/develop</li>\n</ul>\n","categories":[{"name":"git","path":"api/categories/git.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]}