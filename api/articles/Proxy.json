{"title":"Proxy","slug":"Proxy","date":"2022-11-11T01:09:45.000Z","updated":"2023-06-21T08:55:09.213Z","comments":true,"path":"api/articles/Proxy.json","excerpt":null,"covers":["/blog/img/proxy-handler.jpg"],"content":"<p>面试常问的 vue3 源码实现，之前一直在用但是没有系统的学习过 Proxy 的知识，这篇从 0 开始由浅入深记录 proxy 的相关语法</p>\n<blockquote>\n<p>文章所有示例代码建议在 chrome 浏览器执行，以方便观察 proxy 属性</p>\n</blockquote>\n<h2 id=\"Hello-Proxy\"><a href=\"#Hello-Proxy\" class=\"headerlink\" title=\"Hello, Proxy\"></a>Hello, Proxy</h2><p><code>Proxy</code>对象可以拦截另一个对象的读写操作，语法很简单</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>target</code>为要代理的对象，可以是任何值</li>\n<li><code>handler</code>为捕捉到需要代理的对象后具体的处理方法</li>\n</ul>\n<p>即：拦截 <code>target</code>，并通过<code>handler</code>方法，对<code>target</code>进行处理。当然，最简单的情况下，我们可以代理一个对象但不进行任何处理</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> source = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> target = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(source, &#123;&#125;); <span class=\"comment\">// handler 为空，不进行任何操作</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target) <span class=\"comment\">// Proxy(&#123;&#125;)</span></span><br><span class=\"line\">target.text = <span class=\"string\">'hello, proxy'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target) <span class=\"comment\">// Proxy(&#123; text: 'hello, proxy' &#125;)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(source) <span class=\"comment\">// &#123; text: 'hello, proxy' &#125;</span></span><br></pre></td></tr></table></figure></div>\n<p>在这个示例中我们看到，因为没有处理器，所有对 <code>target</code> 的操作也直接转发到了<code>source</code>。此时，<code>Proxy</code>只能算是充当了一个对象的容器，包装了<code>source</code>对象，内部的<code>target</code>和<code>source</code>可以说是一样的。如果我们需要代理更多的功能，就需要添加处理器。</p>\n<p><code>Proxy</code>内定义了一些底层的方法，允许我们通过这些方法拦截并进行代理对象的读写操作。所有底层方法参考<a href=\"https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots\" target=\"_blank\" rel=\"noopener\">proxy 规范</a>。</p>\n<p><img src=\"/blog/img/proxy-handler.jpg\" width=\"950\" height=\"1326\" align=\"center\"></p>\n<p>了解 <code>vue2.x</code> 的已经一眼看到了<code>defineProperty</code>，但是在这里，我们大概率不需要它，我们着重认识以下方法:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">触发时机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">get</td>\n<td style=\"text-align:center\">读取属性时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set</td>\n<td style=\"text-align:center\">写入属性时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ownKeys</td>\n<td style=\"text-align:center\">迭代对象时</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Get\"><a href=\"#Get\" class=\"headerlink\" title=\"Get\"></a>Get</h2><p>get用于拦截读取操作，参数为:</p>\n<ul>\n<li><code>target</code>: 目标对象，也就是代理的对象本身</li>\n<li><code>property</code>: 目标属性</li>\n<li><code>receiver</code>: 表示本次读取属性时<code>getter</code>访问器所在的 <code>this</code> 对象。通常来说是<code>proxy</code>对象本身。后面详细说明该属性</li>\n</ul>\n<p>话不多说，直接开始代码</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_numbers = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_numbers, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(target,prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[prop]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers[<span class=\"number\">1</span>]) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers[<span class=\"number\">123</span>]) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure></div>\n<p>上面的示例实现了一个常见功能: 当读取一个数组中不存在的索引值时，默认返回 0 而不是 undefined。</p>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><p>当写入属性时，将会触发<code>set</code>处理器。参数为</p>\n<ul>\n<li><code>target</code>: 目标对象，也就是代理的对象本身</li>\n<li><code>property</code>: 目标属性</li>\n<li><code>value</code>: 改写的目标属性的值</li>\n<li><code>receiver</code>: 表示本次读取属性时<code>getter</code>访问器所在的 <code>this</code> 对象。通常来说是<code>proxy</code>对象本身。后面详细说明该属性</li>\n</ul>\n<p><strong>需要注意的是，如果写入成功，set 捕捉器应该返回<code>true</code>，否则返回<code>false</code>。如果忘记在成功时返回<code>true</code>，操作将触发<code>TypeError</code></strong>。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ori_numbers = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_numbers, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(target, prop, val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">      target[prop] = val</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span> <span class=\"comment\">// 必须 return true, 不然会报错</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">numbers.push(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// Proxy([1, 2])</span></span><br><span class=\"line\">numbers.push(<span class=\"string\">'test'</span>) <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure></div>\n<p>上面例子实现了只能将数字添加到数组中，除数字外类型添加均会报错。</p>\n<h2 id=\"ownKeys-amp-amp\"><a href=\"#ownKeys-amp-amp\" class=\"headerlink\" title=\"ownKeys &amp;&amp;\"></a>ownKeys &amp;&amp;</h2><p><code>ownKey</code>捕捉器用来拦截对象的遍历，仅有一个参数<code>target</code>为需要代理的对象。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span>,</span><br><span class=\"line\">  _token: <span class=\"string\">'*****'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  ownKeys(target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(target).filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !key.startsWith(<span class=\"string\">'_'</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> userInfo) <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// name, age</span></span><br></pre></td></tr></table></figure></div>\n<p>上面例子实现了跳过对象中以下划线开头的字段。上面例子中，<code>userInfo</code> 不包含<code>_token</code>。但同样的，如果返回了代理对象中不包含的字段，最终的代理结果也不会出现这些值</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  ownKeys(target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'sex'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(userInfo)) <span class=\"comment\">// 输出[], 不会添加 sex 字段</span></span><br></pre></td></tr></table></figure></div>\n<p>如果希望能够返回被代理的对象中原本不存在的字段，还需要搭配<code>getOwnPropertyDescriptor</code>，并返回<code>enumerable: true, configurable: true</code>。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  ownKeys(target) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return [...Object.keys(target), ...['sex']]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'sex'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getOwnPropertyDescriptor(target, prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(userInfo)) <span class=\"comment\">// 输出['sex'], 如果需要其他属性需要同时返回其他属性</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"deleteProperty\"><a href=\"#deleteProperty\" class=\"headerlink\" title=\"deleteProperty\"></a>deleteProperty</h2><p><code>deleteProperty</code>捕捉器用来拦截删除代理对象属性，参数为：</p>\n<ul>\n<li><code>target</code>: 目标对象，也就是代理的对象本身</li>\n<li><code>property</code>: 目标属性</li>\n</ul>\n<p>编程语言中约定以下划线开头的属性和方法视作内部属性和方法，不能从对象外部访问和操作。接下来实现一个较为复杂的例子，要求对下划线开头的属性:</p>\n<ul>\n<li>当读取此类属性时，抛出错误。</li>\n<li>当写入属性时，抛出错误。</li>\n<li>尝试删除属性时，抛出错误，</li>\n<li>遍历对象时，不包含该属性。</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span>,</span><br><span class=\"line\">  _token: <span class=\"string\">'*****'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo =<span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(target, prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop.startsWith(<span class=\"string\">'_'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'不能访问私有属性'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = target[prop]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'function'</span>) ? value.bind(target) : value <span class=\"comment\">// 注意这一行</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(target,prop, val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop.startsWith(<span class=\"string\">'_'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"不能设置私有属性\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      target[prop] = val;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  deleteProperty(target, prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop.startsWith(<span class=\"string\">'_'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"不能删除私有属性\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> target[prop];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ownKeys(target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(target).filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !key.startsWith(<span class=\"string\">'_'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(userInfo._token)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.message) <span class=\"comment\">// 不能访问私有属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  userInfo._token = <span class=\"string\">'test'</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.message) <span class=\"comment\">// 不能设置私有属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> userInfo._token</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.message) <span class=\"comment\">// 不能删除私有属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> userInfo) alert(key); <span class=\"comment\">// name, age</span></span><br></pre></td></tr></table></figure></div>\n<p>需要注意的是，在<code>get</code>捕捉器中，返回对象字段是的写法。为什么要使用<code>value.bind(target)</code>这样的语法呢？有一点需要知道的事，我们在上面的例子中一直操作的都是属性，但<code>Proxy</code>同样可以代理方法。如果代理的是方法，而方法又必须能够访问私有属性，就像这样</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  _token: <span class=\"string\">'xxxxx'</span>,</span><br><span class=\"line\">  checkToken(token) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> token === <span class=\"keyword\">this</span>._token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<p>此时，如果想要代理<code>ori_user_info.checkToken()</code>，该方法的调用将被指向到<code>userInfo</code>内部，当方法尝试访问<code>this._token</code>，又会触发<code>getter</code>捕捉器，导致抛出错误。因此就必须保证执行此操作时，<code>this</code>指向的仍然是原始对象自己的<code>this指针</code>。还记得之前<code>getter、setter</code>捕捉器中有一个上文未解释的参数<code>receiver</code>吗？你可以往上翻一下重新看看它的定义。这个参数的意义便在于此。并且，上面示例中的语法可读性不高，同时，一个对象可能被代理多次，在处理这种数据时，写法还会更加混乱。好在我们现在有更好的方式去实现它。</p>\n<h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><p>首先，<code>Reflect</code>并不是<code>Proxy</code>的专属语法，他是一个对象，将很多js对象的方法挂载上去，作为静态方法使用。我个人理解，<code>Reflect</code>就是 Object 方法的变体，他的工作使用之前操作 object 的方法都可以实现。唯一的不同就是 <code>Reflect</code>的语法完美切合<code>Proxy</code>的语法。具体的使用方式我参考了<a href=\"https://www.zhangxinxu.com/wordpress/2021/07/js-proxy-reflect/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>，这里就不赘述了。总之有了 <code>Reflect</code>之后，我们就可以对方法进行代理，且不用操心 this 的指向问题</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">  _name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  <span class=\"keyword\">get</span> name() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> userProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(user, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(target, prop, receiver) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, prop, receiver)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> admin = <span class=\"built_in\">Object</span>.assign(userProxy, &#123;</span><br><span class=\"line\">  _name: <span class=\"string\">'lisi'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(admin.name) <span class=\"comment\">// lisi</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has\"></a>has</h2><p><code>has</code>捕捉器会拦截<code>in</code>调用，参数为:</p>\n<ul>\n<li><code>target</code>: 目标对象，也就是代理的对象本身</li>\n<li><code>property</code>: 目标属性</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_range = &#123;</span><br><span class=\"line\">  start: <span class=\"number\">1</span>,</span><br><span class=\"line\">  end: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> range = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_range, &#123;</span><br><span class=\"line\">  has(target, prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prop &gt;= target.start &amp;&amp; prop &lt;= target.end;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span> <span class=\"keyword\">in</span> range); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">11</span> <span class=\"keyword\">in</span> range); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></div>\n<p>以上示例实现了使用 <code>in</code> 操作符检查一个数字是否在 <code>range</code>范围内。你看这个语法像不像 vue 的 for 循环？</p>\n<p>上面就是 vue3 源码响应式的核心方法了，有时间补充一下简易版的 vue3 原理。</p>\n","more":"<p>面试常问的 vue3 源码实现，之前一直在用但是没有系统的学习过 Proxy 的知识，这篇从 0 开始由浅入深记录 proxy 的相关语法</p>\n<blockquote>\n<p>文章所有示例代码建议在 chrome 浏览器执行，以方便观察 proxy 属性</p>\n</blockquote>\n<h2 id=\"Hello-Proxy\"><a href=\"#Hello-Proxy\" class=\"headerlink\" title=\"Hello, Proxy\"></a>Hello, Proxy</h2><p><code>Proxy</code>对象可以拦截另一个对象的读写操作，语法很简单</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>target</code>为要代理的对象，可以是任何值</li>\n<li><code>handler</code>为捕捉到需要代理的对象后具体的处理方法</li>\n</ul>\n<p>即：拦截 <code>target</code>，并通过<code>handler</code>方法，对<code>target</code>进行处理。当然，最简单的情况下，我们可以代理一个对象但不进行任何处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> source = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> target = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(source, &#123;&#125;); <span class=\"comment\">// handler 为空，不进行任何操作</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target) <span class=\"comment\">// Proxy(&#123;&#125;)</span></span><br><span class=\"line\">target.text = <span class=\"string\">'hello, proxy'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target) <span class=\"comment\">// Proxy(&#123; text: 'hello, proxy' &#125;)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(source) <span class=\"comment\">// &#123; text: 'hello, proxy' &#125;</span></span><br></pre></td></tr></table></figure>\n<p>在这个示例中我们看到，因为没有处理器，所有对 <code>target</code> 的操作也直接转发到了<code>source</code>。此时，<code>Proxy</code>只能算是充当了一个对象的容器，包装了<code>source</code>对象，内部的<code>target</code>和<code>source</code>可以说是一样的。如果我们需要代理更多的功能，就需要添加处理器。</p>\n<p><code>Proxy</code>内定义了一些底层的方法，允许我们通过这些方法拦截并进行代理对象的读写操作。所有底层方法参考<a href=\"https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots\" target=\"_blank\" rel=\"noopener\">proxy 规范</a>。</p>\n<p><img src=\"/blog/img/proxy-handler.jpg\" width=\"950\" height=\"1326\" align=\"center\"></p>\n<p>了解 <code>vue2.x</code> 的已经一眼看到了<code>defineProperty</code>，但是在这里，我们大概率不需要它，我们着重认识以下方法:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">触发时机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">get</td>\n<td style=\"text-align:center\">读取属性时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set</td>\n<td style=\"text-align:center\">写入属性时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ownKeys</td>\n<td style=\"text-align:center\">迭代对象时</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Get\"><a href=\"#Get\" class=\"headerlink\" title=\"Get\"></a>Get</h2><p>get用于拦截读取操作，参数为:</p>\n<ul>\n<li><code>target</code>: 目标对象，也就是代理的对象本身</li>\n<li><code>property</code>: 目标属性</li>\n<li><code>receiver</code>: 表示本次读取属性时<code>getter</code>访问器所在的 <code>this</code> 对象。通常来说是<code>proxy</code>对象本身。后面详细说明该属性</li>\n</ul>\n<p>话不多说，直接开始代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_numbers = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_numbers, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(target,prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[prop]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers[<span class=\"number\">1</span>]) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers[<span class=\"number\">123</span>]) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>上面的示例实现了一个常见功能: 当读取一个数组中不存在的索引值时，默认返回 0 而不是 undefined。</p>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><p>当写入属性时，将会触发<code>set</code>处理器。参数为</p>\n<ul>\n<li><code>target</code>: 目标对象，也就是代理的对象本身</li>\n<li><code>property</code>: 目标属性</li>\n<li><code>value</code>: 改写的目标属性的值</li>\n<li><code>receiver</code>: 表示本次读取属性时<code>getter</code>访问器所在的 <code>this</code> 对象。通常来说是<code>proxy</code>对象本身。后面详细说明该属性</li>\n</ul>\n<p><strong>需要注意的是，如果写入成功，set 捕捉器应该返回<code>true</code>，否则返回<code>false</code>。如果忘记在成功时返回<code>true</code>，操作将触发<code>TypeError</code></strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ori_numbers = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_numbers, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(target, prop, val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">      target[prop] = val</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span> <span class=\"comment\">// 必须 return true, 不然会报错</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">numbers.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">numbers.push(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers) <span class=\"comment\">// Proxy([1, 2])</span></span><br><span class=\"line\">numbers.push(<span class=\"string\">'test'</span>) <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n<p>上面例子实现了只能将数字添加到数组中，除数字外类型添加均会报错。</p>\n<h2 id=\"ownKeys-amp-amp\"><a href=\"#ownKeys-amp-amp\" class=\"headerlink\" title=\"ownKeys &amp;&amp;\"></a>ownKeys &amp;&amp;</h2><p><code>ownKey</code>捕捉器用来拦截对象的遍历，仅有一个参数<code>target</code>为需要代理的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span>,</span><br><span class=\"line\">  _token: <span class=\"string\">'*****'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  ownKeys(target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(target).filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !key.startsWith(<span class=\"string\">'_'</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> userInfo) <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// name, age</span></span><br></pre></td></tr></table></figure>\n<p>上面例子实现了跳过对象中以下划线开头的字段。上面例子中，<code>userInfo</code> 不包含<code>_token</code>。但同样的，如果返回了代理对象中不包含的字段，最终的代理结果也不会出现这些值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  ownKeys(target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'sex'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(userInfo)) <span class=\"comment\">// 输出[], 不会添加 sex 字段</span></span><br></pre></td></tr></table></figure>\n<p>如果希望能够返回被代理的对象中原本不存在的字段，还需要搭配<code>getOwnPropertyDescriptor</code>，并返回<code>enumerable: true, configurable: true</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  ownKeys(target) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return [...Object.keys(target), ...['sex']]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'sex'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getOwnPropertyDescriptor(target, prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(userInfo)) <span class=\"comment\">// 输出['sex'], 如果需要其他属性需要同时返回其他属性</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"deleteProperty\"><a href=\"#deleteProperty\" class=\"headerlink\" title=\"deleteProperty\"></a>deleteProperty</h2><p><code>deleteProperty</code>捕捉器用来拦截删除代理对象属性，参数为：</p>\n<ul>\n<li><code>target</code>: 目标对象，也就是代理的对象本身</li>\n<li><code>property</code>: 目标属性</li>\n</ul>\n<p>编程语言中约定以下划线开头的属性和方法视作内部属性和方法，不能从对象外部访问和操作。接下来实现一个较为复杂的例子，要求对下划线开头的属性:</p>\n<ul>\n<li>当读取此类属性时，抛出错误。</li>\n<li>当写入属性时，抛出错误。</li>\n<li>尝试删除属性时，抛出错误，</li>\n<li>遍历对象时，不包含该属性。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">30</span>,</span><br><span class=\"line\">  _token: <span class=\"string\">'*****'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo =<span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(target, prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop.startsWith(<span class=\"string\">'_'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'不能访问私有属性'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = target[prop]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'function'</span>) ? value.bind(target) : value <span class=\"comment\">// 注意这一行</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(target,prop, val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop.startsWith(<span class=\"string\">'_'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"不能设置私有属性\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      target[prop] = val;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  deleteProperty(target, prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop.startsWith(<span class=\"string\">'_'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"不能删除私有属性\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> target[prop];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ownKeys(target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(target).filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !key.startsWith(<span class=\"string\">'_'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(userInfo._token)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.message) <span class=\"comment\">// 不能访问私有属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  userInfo._token = <span class=\"string\">'test'</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.message) <span class=\"comment\">// 不能设置私有属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> userInfo._token</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.message) <span class=\"comment\">// 不能删除私有属性</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> userInfo) alert(key); <span class=\"comment\">// name, age</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是，在<code>get</code>捕捉器中，返回对象字段是的写法。为什么要使用<code>value.bind(target)</code>这样的语法呢？有一点需要知道的事，我们在上面的例子中一直操作的都是属性，但<code>Proxy</code>同样可以代理方法。如果代理的是方法，而方法又必须能够访问私有属性，就像这样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_user_info = &#123;</span><br><span class=\"line\">  _token: <span class=\"string\">'xxxxx'</span>,</span><br><span class=\"line\">  checkToken(token) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> token === <span class=\"keyword\">this</span>._token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_user_info, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>此时，如果想要代理<code>ori_user_info.checkToken()</code>，该方法的调用将被指向到<code>userInfo</code>内部，当方法尝试访问<code>this._token</code>，又会触发<code>getter</code>捕捉器，导致抛出错误。因此就必须保证执行此操作时，<code>this</code>指向的仍然是原始对象自己的<code>this指针</code>。还记得之前<code>getter、setter</code>捕捉器中有一个上文未解释的参数<code>receiver</code>吗？你可以往上翻一下重新看看它的定义。这个参数的意义便在于此。并且，上面示例中的语法可读性不高，同时，一个对象可能被代理多次，在处理这种数据时，写法还会更加混乱。好在我们现在有更好的方式去实现它。</p>\n<h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><p>首先，<code>Reflect</code>并不是<code>Proxy</code>的专属语法，他是一个对象，将很多js对象的方法挂载上去，作为静态方法使用。我个人理解，<code>Reflect</code>就是 Object 方法的变体，他的工作使用之前操作 object 的方法都可以实现。唯一的不同就是 <code>Reflect</code>的语法完美切合<code>Proxy</code>的语法。具体的使用方式我参考了<a href=\"https://www.zhangxinxu.com/wordpress/2021/07/js-proxy-reflect/\" target=\"_blank\" rel=\"noopener\">张鑫旭</a>，这里就不赘述了。总之有了 <code>Reflect</code>之后，我们就可以对方法进行代理，且不用操心 this 的指向问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">  _name: <span class=\"string\">'zhangsan'</span>,</span><br><span class=\"line\">  <span class=\"keyword\">get</span> name() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> userProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(user, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(target, prop, receiver) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, prop, receiver)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> admin = <span class=\"built_in\">Object</span>.assign(userProxy, &#123;</span><br><span class=\"line\">  _name: <span class=\"string\">'lisi'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(admin.name) <span class=\"comment\">// lisi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has\"></a>has</h2><p><code>has</code>捕捉器会拦截<code>in</code>调用，参数为:</p>\n<ul>\n<li><code>target</code>: 目标对象，也就是代理的对象本身</li>\n<li><code>property</code>: 目标属性</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ori_range = &#123;</span><br><span class=\"line\">  start: <span class=\"number\">1</span>,</span><br><span class=\"line\">  end: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> range = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(ori_range, &#123;</span><br><span class=\"line\">  has(target, prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prop &gt;= target.start &amp;&amp; prop &lt;= target.end;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span> <span class=\"keyword\">in</span> range); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">11</span> <span class=\"keyword\">in</span> range); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>以上示例实现了使用 <code>in</code> 操作符检查一个数字是否在 <code>range</code>范围内。你看这个语法像不像 vue 的 for 循环？</p>\n<p>上面就是 vue3 源码响应式的核心方法了，有时间补充一下简易版的 vue3 原理。</p>\n","categories":[{"name":"javaScript","path":"api/categories/javaScript.json"}],"tags":[{"name":"es6","path":"api/tags/es6.json"},{"name":"proxy","path":"api/tags/proxy.json"},{"name":"面试","path":"api/tags/面试.json"}]}