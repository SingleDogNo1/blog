{"title":"vuex4 + typescript 配置","slug":"vuex4","date":"2021-01-26T03:11:50.000Z","updated":"2023-06-21T08:55:09.214Z","comments":true,"path":"api/articles/vuex4.json","excerpt":null,"covers":null,"content":"<p>说起来惭愧,vue3快正式发布了,我才开始研究语法,好在除了书写习惯需要改变之外,vue 本身的变动并不是很大,但是配合 typescript 之后就不一样了,这篇说一下我的vue3 配置 – vuex 篇</p>\n<blockquote>\n<p>参照 <a href=\"https://next.vuex.vuejs.org/guide/typescript-support.html\" target=\"_blank\" rel=\"noopener\">vuex 官方文档</a></p>\n</blockquote>\n<h2 id=\"创建文件结构\"><a href=\"#创建文件结构\" class=\"headerlink\" title=\"创建文件结构\"></a>创建文件结构</h2><p>基本结构并没有太大变化,仍然是<code>store</code>文件夹,但有两点需要注意:</p>\n<ul>\n<li>原本的 js 文件,现在全变成 ts 文件</li>\n<li>因为是 ts 文件,对应的 module 下都创建<code>interface.ts</code>,标识该模块的类型</li>\n</ul>\n<p>结构大致如下:</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">── store</span><br><span class=\"line\">   ├── index.ts <span class=\"comment\">// 顶层state</span></span><br><span class=\"line\">   ├── interface.ts <span class=\"comment\">// 顶层 state 类型</span></span><br><span class=\"line\">   └── modules</span><br><span class=\"line\">       └── test</span><br><span class=\"line\">           ├── index.ts <span class=\"comment\">// test模块 state</span></span><br><span class=\"line\">           └── interface.ts <span class=\"comment\">// test模块 state 类型</span></span><br><span class=\"line\">       └── user</span><br><span class=\"line\">           ├── index.ts <span class=\"comment\">//uer 模块</span></span><br><span class=\"line\">           └── interface.ts <span class=\"comment\">// user模块 state 类型</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"配置顶层-state\"><a href=\"#配置顶层-state\" class=\"headerlink\" title=\"配置顶层 state\"></a>配置顶层 state</h2><ul>\n<li>定义顶层 state 的数据类型, 假设有全局 state,需要定义</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">TYPESCRIPT</span></header><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/interface.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> RootState &#123;</span><br><span class=\"line\">  test: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>在<code>store/index.ts</code>中,调用 state 定义,晗需要生成一个唯一的 key,保证 store 实例注册时唯一</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">TYPESCRIPT</span></header><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectionKey &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, Store &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RootState <span class=\"keyword\">from</span> <span class=\"string\">'./interface'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore&lt;RootState&gt;(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    test: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;,</span><br><span class=\"line\">  modules: &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> key: InjectionKey&lt;Store&lt;RootState&gt;&gt; = Symbol(<span class=\"string\">'vue-store'</span>)</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>生成的 key 在<code>main.ts</code>注册时作为第二个参数引入</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">TYPESCRIPT</span></header><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App)</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store, &#123; key &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"></span><br><span class=\"line\">app</span><br><span class=\"line\">  .use(store, key)</span><br><span class=\"line\">  .use(router)</span><br><span class=\"line\">  .mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>将 key 添加在<code>store/index.ts</code>中统一导出,使用的时候就可以直接调用</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">TYPESCRIPT</span></header><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改 index.ts 为以下</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, Store, useStore <span class=\"keyword\">as</span> baseUseStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore&lt;RootState&gt;(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    test: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;,</span><br><span class=\"line\">  modules: &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> key: InjectionKey&lt;Store&lt;RootState&gt;&gt; = Symbol(<span class=\"string\">'vue-store'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useStore</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseUseStore(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>这样, vue组件中可以通过<code>Composition API</code>调用</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/store'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineComponent(&#123;</span><br><span class=\"line\">  setup() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = useStore()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n<p>到这里,定义在顶层的各种数据和方法,都可以不需要定义类型直接使用了,<strong>但是定义在子模块(modules)的部分还不行,需要继续配置</strong></p>\n<h2 id=\"定义子模块-modules\"><a href=\"#定义子模块-modules\" class=\"headerlink\" title=\"定义子模块(modules)\"></a>定义子模块(modules)</h2><ul>\n<li>还是定义 state,以 user 模块举例,类型定义在<code>store/modules/user/interface/ts</code>,有两个字段:name, age</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">TYPESCRIPT</span></header><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/modules/user/interface.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> UserState &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span></span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>引入对应模块的数据类型,按照官网教程提示,子模块使用泛型定义类型,第一个泛型参数是当前子模块类型,第二个参数是顶层模块类型,定义之后会在所有使用 state 的地方自动断言,不需要重复定义</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">TYPESCRIPT</span></header><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/modules/user/index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RootState <span class=\"keyword\">from</span> <span class=\"string\">'@/store/interface'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UserState <span class=\"keyword\">from</span> <span class=\"string\">'./interface'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userModule: Module&lt;UserState, RootState&gt; = &#123;</span><br><span class=\"line\">  namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    AGE_ADD: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">      state.age++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> userModule</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>然后在<code>store/interface.ts</code>中增加一个全量的 state 类型,之后的 state 类型使用全量的类型即可,后续如果继续新增模块,也要更新到全量类型中来</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">TYPESCRIPT</span></header><figure class=\"iseeu highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/interface.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> userState <span class=\"keyword\">from</span> <span class=\"string\">'./modules/user/interface'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> RootState &#123;</span><br><span class=\"line\">  test: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后集合成所有模块的 state 类型</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AllState <span class=\"keyword\">extends</span> RootState &#123;</span><br><span class=\"line\">  user: userState</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>最后把全局的 state 注入到全局的 vuex 中,原理等同于定义子模块的类型,使用泛型定义全局 state</li>\n</ul>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JAVASCRIPT</span></header><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/index.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectionKey &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, Store, useStore <span class=\"keyword\">as</span> baseUseStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RootState <span class=\"keyword\">from</span> <span class=\"string\">'./interface'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> user <span class=\"keyword\">from</span> <span class=\"string\">'./modules/user'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AllState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./interface'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore&lt;RootState&gt;(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    test: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    user</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> key: InjectionKey&lt;Store&lt;RootState&gt;&gt; = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'vue-store'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 泛型定义所有子模块的 state</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useStore</span>&lt;<span class=\"title\">T</span> = <span class=\"title\">AllState</span>&gt;(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseUseStore&lt;T&gt;(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>然后,在vue 模块中就可以像以前一样轻松地的使用了</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">PLAIN</span></header><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;addAge&quot;&gt;+&lt;/button&gt;</span><br><span class=\"line\">    &#123;&#123; age &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; defineComponent, computed &#125; from &apos;vue&apos;</span><br><span class=\"line\">import &#123; useStore &#125; from &apos;@/store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default defineComponent(&#123;</span><br><span class=\"line\">  name: &apos;HelloWorld&apos;,</span><br><span class=\"line\">  setup() &#123;</span><br><span class=\"line\">    const store = useStore()</span><br><span class=\"line\">    const age = computed(() =&gt; store.state.user.age)</span><br><span class=\"line\">    const addAge = () =&gt; &#123;</span><br><span class=\"line\">      store.commit(&apos;user/AGE_ADD&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      age,</span><br><span class=\"line\">      addAge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>state类型定义单独放在一个文件中方便管理</li>\n<li>各个子模块的类型定义单独放在子模块的文件夹中处理, 最后再集成在根节点上</li>\n<li>使用 vuex 命名空间, 规范模块</li>\n</ul>\n","more":"<p>说起来惭愧,vue3快正式发布了,我才开始研究语法,好在除了书写习惯需要改变之外,vue 本身的变动并不是很大,但是配合 typescript 之后就不一样了,这篇说一下我的vue3 配置 – vuex 篇</p>\n<blockquote>\n<p>参照 <a href=\"https://next.vuex.vuejs.org/guide/typescript-support.html\" target=\"_blank\" rel=\"noopener\">vuex 官方文档</a></p>\n</blockquote>\n<h2 id=\"创建文件结构\"><a href=\"#创建文件结构\" class=\"headerlink\" title=\"创建文件结构\"></a>创建文件结构</h2><p>基本结构并没有太大变化,仍然是<code>store</code>文件夹,但有两点需要注意:</p>\n<ul>\n<li>原本的 js 文件,现在全变成 ts 文件</li>\n<li>因为是 ts 文件,对应的 module 下都创建<code>interface.ts</code>,标识该模块的类型</li>\n</ul>\n<p>结构大致如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">── store</span><br><span class=\"line\">   ├── index.ts <span class=\"comment\">// 顶层state</span></span><br><span class=\"line\">   ├── interface.ts <span class=\"comment\">// 顶层 state 类型</span></span><br><span class=\"line\">   └── modules</span><br><span class=\"line\">       └── test</span><br><span class=\"line\">           ├── index.ts <span class=\"comment\">// test模块 state</span></span><br><span class=\"line\">           └── interface.ts <span class=\"comment\">// test模块 state 类型</span></span><br><span class=\"line\">       └── user</span><br><span class=\"line\">           ├── index.ts <span class=\"comment\">//uer 模块</span></span><br><span class=\"line\">           └── interface.ts <span class=\"comment\">// user模块 state 类型</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置顶层-state\"><a href=\"#配置顶层-state\" class=\"headerlink\" title=\"配置顶层 state\"></a>配置顶层 state</h2><ul>\n<li>定义顶层 state 的数据类型, 假设有全局 state,需要定义</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/interface.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> RootState &#123;</span><br><span class=\"line\">  test: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在<code>store/index.ts</code>中,调用 state 定义,晗需要生成一个唯一的 key,保证 store 实例注册时唯一</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectionKey &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, Store &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RootState <span class=\"keyword\">from</span> <span class=\"string\">'./interface'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore&lt;RootState&gt;(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    test: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;,</span><br><span class=\"line\">  modules: &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> key: InjectionKey&lt;Store&lt;RootState&gt;&gt; = Symbol(<span class=\"string\">'vue-store'</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成的 key 在<code>main.ts</code>注册时作为第二个参数引入</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App)</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store, &#123; key &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"></span><br><span class=\"line\">app</span><br><span class=\"line\">  .use(store, key)</span><br><span class=\"line\">  .use(router)</span><br><span class=\"line\">  .mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将 key 添加在<code>store/index.ts</code>中统一导出,使用的时候就可以直接调用</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改 index.ts 为以下</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, Store, useStore <span class=\"keyword\">as</span> baseUseStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore&lt;RootState&gt;(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    test: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;,</span><br><span class=\"line\">  modules: &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> key: InjectionKey&lt;Store&lt;RootState&gt;&gt; = Symbol(<span class=\"string\">'vue-store'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useStore</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseUseStore(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样, vue组件中可以通过<code>Composition API</code>调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/store'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineComponent(&#123;</span><br><span class=\"line\">  setup() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = useStore()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>到这里,定义在顶层的各种数据和方法,都可以不需要定义类型直接使用了,<strong>但是定义在子模块(modules)的部分还不行,需要继续配置</strong></p>\n<h2 id=\"定义子模块-modules\"><a href=\"#定义子模块-modules\" class=\"headerlink\" title=\"定义子模块(modules)\"></a>定义子模块(modules)</h2><ul>\n<li>还是定义 state,以 user 模块举例,类型定义在<code>store/modules/user/interface/ts</code>,有两个字段:name, age</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/modules/user/interface.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> UserState &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span></span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>引入对应模块的数据类型,按照官网教程提示,子模块使用泛型定义类型,第一个泛型参数是当前子模块类型,第二个参数是顶层模块类型,定义之后会在所有使用 state 的地方自动断言,不需要重复定义</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/modules/user/index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Module &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RootState <span class=\"keyword\">from</span> <span class=\"string\">'@/store/interface'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UserState <span class=\"keyword\">from</span> <span class=\"string\">'./interface'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userModule: Module&lt;UserState, RootState&gt; = &#123;</span><br><span class=\"line\">  namespaced: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    AGE_ADD: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">      state.age++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> userModule</span><br></pre></td></tr></table></figure>\n<ul>\n<li>然后在<code>store/interface.ts</code>中增加一个全量的 state 类型,之后的 state 类型使用全量的类型即可,后续如果继续新增模块,也要更新到全量类型中来</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/interface.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> userState <span class=\"keyword\">from</span> <span class=\"string\">'./modules/user/interface'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> RootState &#123;</span><br><span class=\"line\">  test: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后集合成所有模块的 state 类型</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AllState <span class=\"keyword\">extends</span> RootState &#123;</span><br><span class=\"line\">  user: userState</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>最后把全局的 state 注入到全局的 vuex 中,原理等同于定义子模块的类型,使用泛型定义全局 state</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/index.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectionKey &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, Store, useStore <span class=\"keyword\">as</span> baseUseStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RootState <span class=\"keyword\">from</span> <span class=\"string\">'./interface'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> user <span class=\"keyword\">from</span> <span class=\"string\">'./modules/user'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AllState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./interface'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createStore&lt;RootState&gt;(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    test: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;&#125;,</span><br><span class=\"line\">  mutations: &#123;&#125;,</span><br><span class=\"line\">  actions: &#123;&#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    user</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> key: InjectionKey&lt;Store&lt;RootState&gt;&gt; = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'vue-store'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 泛型定义所有子模块的 state</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useStore</span>&lt;<span class=\"title\">T</span> = <span class=\"title\">AllState</span>&gt;(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseUseStore&lt;T&gt;(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后,在vue 模块中就可以像以前一样轻松地的使用了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;addAge&quot;&gt;+&lt;/button&gt;</span><br><span class=\"line\">    &#123;&#123; age &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; defineComponent, computed &#125; from &apos;vue&apos;</span><br><span class=\"line\">import &#123; useStore &#125; from &apos;@/store&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default defineComponent(&#123;</span><br><span class=\"line\">  name: &apos;HelloWorld&apos;,</span><br><span class=\"line\">  setup() &#123;</span><br><span class=\"line\">    const store = useStore()</span><br><span class=\"line\">    const age = computed(() =&gt; store.state.user.age)</span><br><span class=\"line\">    const addAge = () =&gt; &#123;</span><br><span class=\"line\">      store.commit(&apos;user/AGE_ADD&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      age,</span><br><span class=\"line\">      addAge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>state类型定义单独放在一个文件中方便管理</li>\n<li>各个子模块的类型定义单独放在子模块的文件夹中处理, 最后再集成在根节点上</li>\n<li>使用 vuex 命名空间, 规范模块</li>\n</ul>\n","categories":[{"name":"vue","path":"api/categories/vue.json"},{"name":"vue3","path":"api/categories/vue3.json"}],"tags":[{"name":"vue","path":"api/tags/vue.json"},{"name":"vue3","path":"api/tags/vue3.json"}]}