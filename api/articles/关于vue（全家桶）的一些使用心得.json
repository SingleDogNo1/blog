{"title":"关于vue（全家桶）的一些使用心得","slug":"关于vue（全家桶）的一些使用心得","date":"2018-07-15T07:28:46.000Z","updated":"2023-06-21T08:55:09.215Z","comments":true,"path":"api/articles/关于vue（全家桶）的一些使用心得.json","excerpt":null,"covers":null,"content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>最早之前开发的项目随着业务逻辑的迭代，到达现在实在让人无法接受，于是不得不进行了重构，紧锣密鼓的几个月之后终于完成。在这里说一下自己的一些感受。</p>\n<h2 id=\"关于vue-cli\"><a href=\"#关于vue-cli\" class=\"headerlink\" title=\"关于vue-cli\"></a>关于vue-cli</h2><p>vue-cli对vue进行了非常多的处理，尽量让开发者可以专心处理业务的逻辑而不用关心底层的部分。尽管如此，还是需要另外配置很多东西。</p>\n<h3 id=\"预处理器（eg-sass）\"><a href=\"#预处理器（eg-sass）\" class=\"headerlink\" title=\"预处理器（eg:sass）\"></a>预处理器（eg:sass）</h3><ul>\n<li>新版本的脚手架工具配置好了预处理器的部分，但没有集成预处理语言，也就是说，你不再需要配置预处理器，但还是应该install它。</li>\n<li><p>在一些情况下， sass的编译会出现异常。如果你能确信自己写的没有错，那问题确实出现在sass上，一般情况下sass的语法无法处理多层级的样式叠加。例如：我的项目引用了swiper，并全局使用swiper。.css。之后，又将swiper封装为组件，并给组件一些额外的样式，最后在组件调用时第三次添加特殊的样式，如此叠加css导致sass处理出现了问题。这个时候需要<code>deep</code>模式。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"><span>build/utils.js</span></span><span class=\"mac-panel__language\">CSS</span></header><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/deep/ .my-swiper&#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><ul>\n<li>host 0.0.0.0<br>开发移动应用，需要随时在手机上观察效果。在<code>package.json</code>添加</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js --host 0.0.0.0\",</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>关于背景图打包后出错的问题<br>开发大型项目当然需要对src目录做一些修改，但添加层级也会导致webpack打包出错。我的项目通过分割组件构成，组建内部专属的图片直接放在组件文件内部。具体结构是这样的</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"><span>build/utils.js</span></span><span class=\"mac-panel__language\">SHELL</span></header><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─src</span><br><span class=\"line\">│  ├─assets</span><br><span class=\"line\">│  │  ├─images</span><br><span class=\"line\">│  │  ├─js</span><br><span class=\"line\">│  │  ├─css</span><br><span class=\"line\">│  │  ├─font</span><br><span class=\"line\">│  ├─ pages</span><br><span class=\"line\">│  │  ├─Index</span><br><span class=\"line\">│  │  │ ├─Index.vue</span><br><span class=\"line\">│  │  │ ├─1.jpg</span><br><span class=\"line\">│  │  ├─Mine</span><br><span class=\"line\">│  │  ├─...</span><br></pre></td></tr></table></figure></div>\n<p>这个时候图片打包需要重新配置</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"><span>build/utils.js</span></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateLoaders</span> (<span class=\"params\">loader, loaderOptions</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.extract) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">      use: loaders,</span><br><span class=\"line\">      fallback: <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">      publicPath: <span class=\"string\">'../../'</span> <span class=\"comment\">// add</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'vue-style-loader'</span>].concat(loaders)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<h3 id=\"关于axios\"><a href=\"#关于axios\" class=\"headerlink\" title=\"关于axios\"></a>关于axios</h3><p>axios的配置我想说的只有拦截器。可以在请求或响应被 then 或 catch 处理前拦截它们</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Base64&#125; <span class=\"keyword\">from</span> <span class=\"string\">'js-base64'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'@/router/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> $axios = axios.create(&#123;</span><br><span class=\"line\">  baseURL: hostURL + <span class=\"string\">'TouchStoneServiceNew'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.headers[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span></span><br><span class=\"line\">  config.headers[<span class=\"string\">'Authorization'</span>] = authorization</span><br><span class=\"line\">  <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$axios.interceptors.response.use(</span><br><span class=\"line\">  response =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response.data.resultCode === <span class=\"string\">'505'</span> || response.data.resultCode === <span class=\"string\">'506'</span>) &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        Router.push(&#123;</span><br><span class=\"line\">          name: <span class=\"string\">'loginRegister'</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.response) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (error.response.status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">401</span>: <span class=\"comment\">// 返回 401 跳转到登录页面</span></span><br><span class=\"line\">            Router.push(&#123;</span><br><span class=\"line\">              path: <span class=\"string\">'loginRegister'</span>,</span><br><span class=\"line\">              query: &#123;<span class=\"attr\">redirect</span>: Router.currentRoute.fullPath&#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error) <span class=\"comment\">// 返回接口返回的错误信息</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure></div>\n<p>在请求发送之前向header添加content-type和authorization<br>请求返回之后拦截状态做处理</p>\n<h3 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h3><p>vuex用来管理vue状态确实很方便，但<strong>只能在组件中需要共享的数据才使用vuex，简单地说就是路由不会跳转</strong>。因为vuex虽然保存数据，但因为vue本身就是单页项目，如果用户刷新网页就全部丢失了。一些重要的信息海慧寺因该保存在cookie和localstorage里。至于语法可以到官网查看，非常详细。</p>\n","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>最早之前开发的项目随着业务逻辑的迭代，到达现在实在让人无法接受，于是不得不进行了重构，紧锣密鼓的几个月之后终于完成。在这里说一下自己的一些感受。</p>\n<h2 id=\"关于vue-cli\"><a href=\"#关于vue-cli\" class=\"headerlink\" title=\"关于vue-cli\"></a>关于vue-cli</h2><p>vue-cli对vue进行了非常多的处理，尽量让开发者可以专心处理业务的逻辑而不用关心底层的部分。尽管如此，还是需要另外配置很多东西。</p>\n<h3 id=\"预处理器（eg-sass）\"><a href=\"#预处理器（eg-sass）\" class=\"headerlink\" title=\"预处理器（eg:sass）\"></a>预处理器（eg:sass）</h3><ul>\n<li>新版本的脚手架工具配置好了预处理器的部分，但没有集成预处理语言，也就是说，你不再需要配置预处理器，但还是应该install它。</li>\n<li><p>在一些情况下， sass的编译会出现异常。如果你能确信自己写的没有错，那问题确实出现在sass上，一般情况下sass的语法无法处理多层级的样式叠加。例如：我的项目引用了swiper，并全局使用swiper。.css。之后，又将swiper封装为组件，并给组件一些额外的样式，最后在组件调用时第三次添加特殊的样式，如此叠加css导致sass处理出现了问题。这个时候需要<code>deep</code>模式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/deep/ .my-swiper&#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><ul>\n<li>host 0.0.0.0<br>开发移动应用，需要随时在手机上观察效果。在<code>package.json</code>添加</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js --host 0.0.0.0\",</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>关于背景图打包后出错的问题<br>开发大型项目当然需要对src目录做一些修改，但添加层级也会导致webpack打包出错。我的项目通过分割组件构成，组建内部专属的图片直接放在组件文件内部。具体结构是这样的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─src</span><br><span class=\"line\">│  ├─assets</span><br><span class=\"line\">│  │  ├─images</span><br><span class=\"line\">│  │  ├─js</span><br><span class=\"line\">│  │  ├─css</span><br><span class=\"line\">│  │  ├─font</span><br><span class=\"line\">│  ├─ pages</span><br><span class=\"line\">│  │  ├─Index</span><br><span class=\"line\">│  │  │ ├─Index.vue</span><br><span class=\"line\">│  │  │ ├─1.jpg</span><br><span class=\"line\">│  │  ├─Mine</span><br><span class=\"line\">│  │  ├─...</span><br></pre></td></tr></table></figure>\n<p>这个时候图片打包需要重新配置</p>\n<figure class=\"highlight js\"><figcaption><span>build/utils.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateLoaders</span> (<span class=\"params\">loader, loaderOptions</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.extract) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">      use: loaders,</span><br><span class=\"line\">      fallback: <span class=\"string\">'vue-style-loader'</span>,</span><br><span class=\"line\">      publicPath: <span class=\"string\">'../../'</span> <span class=\"comment\">// add</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'vue-style-loader'</span>].concat(loaders)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"关于axios\"><a href=\"#关于axios\" class=\"headerlink\" title=\"关于axios\"></a>关于axios</h3><p>axios的配置我想说的只有拦截器。可以在请求或响应被 then 或 catch 处理前拦截它们</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Base64&#125; <span class=\"keyword\">from</span> <span class=\"string\">'js-base64'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'@/router/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> $axios = axios.create(&#123;</span><br><span class=\"line\">  baseURL: hostURL + <span class=\"string\">'TouchStoneServiceNew'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.headers[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span></span><br><span class=\"line\">  config.headers[<span class=\"string\">'Authorization'</span>] = authorization</span><br><span class=\"line\">  <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$axios.interceptors.response.use(</span><br><span class=\"line\">  response =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response.data.resultCode === <span class=\"string\">'505'</span> || response.data.resultCode === <span class=\"string\">'506'</span>) &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        Router.push(&#123;</span><br><span class=\"line\">          name: <span class=\"string\">'loginRegister'</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.response) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (error.response.status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">401</span>: <span class=\"comment\">// 返回 401 跳转到登录页面</span></span><br><span class=\"line\">            Router.push(&#123;</span><br><span class=\"line\">              path: <span class=\"string\">'loginRegister'</span>,</span><br><span class=\"line\">              query: &#123;<span class=\"attr\">redirect</span>: Router.currentRoute.fullPath&#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error) <span class=\"comment\">// 返回接口返回的错误信息</span></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>在请求发送之前向header添加content-type和authorization<br>请求返回之后拦截状态做处理</p>\n<h3 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h3><p>vuex用来管理vue状态确实很方便，但<strong>只能在组件中需要共享的数据才使用vuex，简单地说就是路由不会跳转</strong>。因为vuex虽然保存数据，但因为vue本身就是单页项目，如果用户刷新网页就全部丢失了。一些重要的信息海慧寺因该保存在cookie和localstorage里。至于语法可以到官网查看，非常详细。</p>\n","categories":[{"name":"vue","path":"api/categories/vue.json"}],"tags":[{"name":"vue","path":"api/tags/vue.json"},{"name":"webpack","path":"api/tags/webpack.json"},{"name":"vuex","path":"api/tags/vuex.json"},{"name":"axios","path":"api/tags/axios.json"},{"name":"es6+","path":"api/tags/es6+.json"}]}