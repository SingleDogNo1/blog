{"title":"前端配合微信授权","slug":"前端配合微信授权","date":"2018-01-12T08:21:52.000Z","updated":"2023-06-21T08:55:09.215Z","comments":true,"path":"api/articles/前端配合微信授权.json","excerpt":null,"covers":null,"content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>最近做了一个微信的活动，功能主要是好友之间互相投票。所以需要进行微信的授权。因为是第一次接触，所以记录下来备不时之需。<strong>这篇博客主要参考官方<a href=\"https://mp.weixin.qq.com/wiki\" target=\"_blank\" rel=\"noopener\">微信公众平台技术文档</a>，由于官方文档前后端教程混杂不方便阅读。所以整理出来这一篇。</strong></p>\n<h3 id=\"关于网页授权回调域名的说明\"><a href=\"#关于网页授权回调域名的说明\" class=\"headerlink\" title=\"关于网页授权回调域名的说明\"></a>关于网页授权回调域名的说明</h3><ul>\n<li>在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头。</li>\n<li>授权回调域名配置规范为全域名，比如需要网页授权的域名为：<a href=\"http://www.qq.com，配置以后此域名下面的页面`http://www.qq.com/music.html`\" target=\"_blank\" rel=\"noopener\">www.qq.com，配置以后此域名下面的页面`http://www.qq.com/music.html`</a> 、 <code>http://www.qq.com/login.html</code> 都可以进行OAuth2.0鉴权。但<code>http://pay.qq.com</code> 、 <code>http://music.qq.com</code> 、 <code>http://qq.com</code>无法进行OAuth2.0鉴权。</li>\n</ul>\n<h3 id=\"关于网页授权的两种scope的区别说明\"><a href=\"#关于网页授权的两种scope的区别说明\" class=\"headerlink\" title=\"关于网页授权的两种scope的区别说明\"></a>关于网页授权的两种scope的区别说明</h3><ul>\n<li>以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）</li>\n<li>以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。</li>\n</ul>\n<h3 id=\"关于网页授权access-token和普通access-token的区别\"><a href=\"#关于网页授权access-token和普通access-token的区别\" class=\"headerlink\" title=\"关于网页授权access_token和普通access_token的区别\"></a>关于网页授权access_token和普通access_token的区别</h3><ul>\n<li>微信网页授权是通过OAuth2.0机制实现的，在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证（网页授权access_token），通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息；</li>\n<li>其他微信接口，需要通过基础支持中的“获取access_token”接口来获取到的普通access_token调用。</li>\n</ul>\n<h2 id=\"授权步骤\"><a href=\"#授权步骤\" class=\"headerlink\" title=\"授权步骤\"></a>授权步骤</h2><h3 id=\"用户同意授权，获取code\"><a href=\"#用户同意授权，获取code\" class=\"headerlink\" title=\"用户同意授权，获取code\"></a>用户同意授权，获取code</h3><p>在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下（服务号获得高级接口后，默认拥有scope参数中的snsapi_base和snsapi_userinfo），引导关注者打开如下页面：<br><code>https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</code>。若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限；并且由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的参数顺序不对，授权页面将无法正常访问。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">是否必填</th>\n<th style=\"text-align:center\">参数说明/</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">appid</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">公众号的唯一标识</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">redirect_uri</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">授权后重定向的回调链接地址， 需要使用<a href=\"http://tool.chinaz.com/Tools/urlencode.aspx\" target=\"_blank\" rel=\"noopener\">urlEncode</a>对链接进行处理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">response_type</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">返回类型，请填写code</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scope</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">state</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#wechat_redirect</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">无论直接打开还是做页面302重定向时候，必须带此参数</td>\n</tr>\n</tbody>\n</table>\n<p>参考链接</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">PLAIN</span></header><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scope为snsapi_base</span><br><span class=\"line\">https://open.weixin.qq.com/connect/oauth2/authorize?</span><br><span class=\"line\">appid=wx520c15f417810387</span><br><span class=\"line\">&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60</span><br><span class=\"line\">&amp;response_type=code</span><br><span class=\"line\">&amp;scope=snsapi_base</span><br><span class=\"line\">&amp;state=123</span><br><span class=\"line\">#wechat_redirect</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">scope为snsapi_userinfo</span><br><span class=\"line\">https://open.weixin.qq.com/connect/oauth2/authorize?</span><br><span class=\"line\">appid=wx6ec33e01876afb1e</span><br><span class=\"line\">&amp;redirect_uri=http%3a%2f%2fh5.dpandora.cn%2fpromote%2fhelp_index.html</span><br><span class=\"line\">&amp;response_type=code</span><br><span class=\"line\">&amp;scope=snsapi_userinfo</span><br><span class=\"line\">&amp;state=STATE</span><br><span class=\"line\">#wechat_redirect</span><br></pre></td></tr></table></figure></div>\n<p>如果同意授权，页面将跳转至<code>redirect_uri/?code=CODE&amp;state=STATE</code>。 把code传给server，server会通过code获取授权access_token，获取用户信息。</p>\n<h3 id=\"使用jssdk\"><a href=\"#使用jssdk\" class=\"headerlink\" title=\"使用jssdk\"></a>使用jssdk</h3><h4 id=\"步骤一：绑定域名\"><a href=\"#步骤一：绑定域名\" class=\"headerlink\" title=\"步骤一：绑定域名\"></a>步骤一：绑定域名</h4><p>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p>\n<h4 id=\"步骤二：引入JS文件\"><a href=\"#步骤二：引入JS文件\" class=\"headerlink\" title=\"步骤二：引入JS文件\"></a>步骤二：引入JS文件</h4><p>在需要调用JS接口的页面引入<code>https://res.wx.qq.com/open/js/jweixin-1.2.0.js</code></p>\n<h4 id=\"步骤三：通过config接口注入权限验证配置\"><a href=\"#步骤三：通过config接口注入权限验证配置\" class=\"headerlink\" title=\"步骤三：通过config接口注入权限验证配置\"></a>步骤三：通过config接口注入权限验证配置</h4><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。通过接口获取签名。</p>\n<div class=\"code-panel__wrapper\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"><header class=\"mac-panel\"><span class=\"doc-path\"></span><span class=\"mac-panel__language\">JS</span></header><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来。</span></span><br><span class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"步骤四：通过ready接口处理成功验证\"><a href=\"#步骤四：通过ready接口处理成功验证\" class=\"headerlink\" title=\"步骤四：通过ready接口处理成功验证\"></a>步骤四：通过ready接口处理成功验证</h4><p>config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><h3 id=\"config-invalid-signature\"><a href=\"#config-invalid-signature\" class=\"headerlink\" title=\"config:invalid signature\"></a>config:invalid signature</h3><p>出现这个错误的原因一定是签名错误。原因可能有以下几种情况，可以逐一排查：</p>\n<ul>\n<li>确认签名算法是否正确，可用<code>http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</code>页面工具进行校验。</li>\n<li>确认config中nonceStr（js中驼峰标准大写S）, timestamp（没有驼峰标准）。</li>\n<li>确认url格式。签名的url是页面完整的url，包括’http(s)://‘部分以及’？’后面的GET参数部分,但不包括’#’hash后面的部分。</li>\n<li>确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。</li>\n<li>确保一定缓存access_token和jsapi_ticket。</li>\n<li>确保你获取用来签名的url是动态获取的，动态页面可参见实例代码中php的实现方式。如果是html的静态页面在前端通过ajax将url传到后台签名，前端需要用js获取当前页面除去’#’hash部分的链接（可用<code>location.href.split(&#39;#&#39;)[0]</code>获取,而且需要encodeURIComponent），因为页面一旦分享，微信客户端会在你的链接末尾加入其它参数，如果不是动态获取当前链接，将导致分享后的页面签名失败。</li>\n</ul>\n<h3 id=\"获取用户昵称的特殊符号\"><a href=\"#获取用户昵称的特殊符号\" class=\"headerlink\" title=\"获取用户昵称的特殊符号\"></a>获取用户昵称的特殊符号</h3><p>有些用户的昵称中包含有非ASCLL字符，包括编码外的图像以及文字。可以使用base64进行处理。</p>\n","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>最近做了一个微信的活动，功能主要是好友之间互相投票。所以需要进行微信的授权。因为是第一次接触，所以记录下来备不时之需。<strong>这篇博客主要参考官方<a href=\"https://mp.weixin.qq.com/wiki\" target=\"_blank\" rel=\"noopener\">微信公众平台技术文档</a>，由于官方文档前后端教程混杂不方便阅读。所以整理出来这一篇。</strong></p>\n<h3 id=\"关于网页授权回调域名的说明\"><a href=\"#关于网页授权回调域名的说明\" class=\"headerlink\" title=\"关于网页授权回调域名的说明\"></a>关于网页授权回调域名的说明</h3><ul>\n<li>在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头。</li>\n<li>授权回调域名配置规范为全域名，比如需要网页授权的域名为：<a href=\"http://www.qq.com，配置以后此域名下面的页面`http://www.qq.com/music.html`\" target=\"_blank\" rel=\"noopener\">www.qq.com，配置以后此域名下面的页面`http://www.qq.com/music.html`</a> 、 <code>http://www.qq.com/login.html</code> 都可以进行OAuth2.0鉴权。但<code>http://pay.qq.com</code> 、 <code>http://music.qq.com</code> 、 <code>http://qq.com</code>无法进行OAuth2.0鉴权。</li>\n</ul>\n<h3 id=\"关于网页授权的两种scope的区别说明\"><a href=\"#关于网页授权的两种scope的区别说明\" class=\"headerlink\" title=\"关于网页授权的两种scope的区别说明\"></a>关于网页授权的两种scope的区别说明</h3><ul>\n<li>以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）</li>\n<li>以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。</li>\n</ul>\n<h3 id=\"关于网页授权access-token和普通access-token的区别\"><a href=\"#关于网页授权access-token和普通access-token的区别\" class=\"headerlink\" title=\"关于网页授权access_token和普通access_token的区别\"></a>关于网页授权access_token和普通access_token的区别</h3><ul>\n<li>微信网页授权是通过OAuth2.0机制实现的，在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证（网页授权access_token），通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息；</li>\n<li>其他微信接口，需要通过基础支持中的“获取access_token”接口来获取到的普通access_token调用。</li>\n</ul>\n<h2 id=\"授权步骤\"><a href=\"#授权步骤\" class=\"headerlink\" title=\"授权步骤\"></a>授权步骤</h2><h3 id=\"用户同意授权，获取code\"><a href=\"#用户同意授权，获取code\" class=\"headerlink\" title=\"用户同意授权，获取code\"></a>用户同意授权，获取code</h3><p>在确保微信公众账号拥有授权作用域（scope参数）的权限的前提下（服务号获得高级接口后，默认拥有scope参数中的snsapi_base和snsapi_userinfo），引导关注者打开如下页面：<br><code>https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</code>。若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限；并且由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的参数顺序不对，授权页面将无法正常访问。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">是否必填</th>\n<th style=\"text-align:center\">参数说明/</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">appid</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">公众号的唯一标识</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">redirect_uri</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">授权后重定向的回调链接地址， 需要使用<a href=\"http://tool.chinaz.com/Tools/urlencode.aspx\" target=\"_blank\" rel=\"noopener\">urlEncode</a>对链接进行处理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">response_type</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">返回类型，请填写code</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scope</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">state</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">重定向后会带上state参数，开发者可以填写a-zA-Z0-9的参数值，最多128字节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#wechat_redirect</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">无论直接打开还是做页面302重定向时候，必须带此参数</td>\n</tr>\n</tbody>\n</table>\n<p>参考链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scope为snsapi_base</span><br><span class=\"line\">https://open.weixin.qq.com/connect/oauth2/authorize?</span><br><span class=\"line\">appid=wx520c15f417810387</span><br><span class=\"line\">&amp;redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60</span><br><span class=\"line\">&amp;response_type=code</span><br><span class=\"line\">&amp;scope=snsapi_base</span><br><span class=\"line\">&amp;state=123</span><br><span class=\"line\">#wechat_redirect</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">scope为snsapi_userinfo</span><br><span class=\"line\">https://open.weixin.qq.com/connect/oauth2/authorize?</span><br><span class=\"line\">appid=wx6ec33e01876afb1e</span><br><span class=\"line\">&amp;redirect_uri=http%3a%2f%2fh5.dpandora.cn%2fpromote%2fhelp_index.html</span><br><span class=\"line\">&amp;response_type=code</span><br><span class=\"line\">&amp;scope=snsapi_userinfo</span><br><span class=\"line\">&amp;state=STATE</span><br><span class=\"line\">#wechat_redirect</span><br></pre></td></tr></table></figure>\n<p>如果同意授权，页面将跳转至<code>redirect_uri/?code=CODE&amp;state=STATE</code>。 把code传给server，server会通过code获取授权access_token，获取用户信息。</p>\n<h3 id=\"使用jssdk\"><a href=\"#使用jssdk\" class=\"headerlink\" title=\"使用jssdk\"></a>使用jssdk</h3><h4 id=\"步骤一：绑定域名\"><a href=\"#步骤一：绑定域名\" class=\"headerlink\" title=\"步骤一：绑定域名\"></a>步骤一：绑定域名</h4><p>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p>\n<h4 id=\"步骤二：引入JS文件\"><a href=\"#步骤二：引入JS文件\" class=\"headerlink\" title=\"步骤二：引入JS文件\"></a>步骤二：引入JS文件</h4><p>在需要调用JS接口的页面引入<code>https://res.wx.qq.com/open/js/jweixin-1.2.0.js</code></p>\n<h4 id=\"步骤三：通过config接口注入权限验证配置\"><a href=\"#步骤三：通过config接口注入权限验证配置\" class=\"headerlink\" title=\"步骤三：通过config接口注入权限验证配置\"></a>步骤三：通过config接口注入权限验证配置</h4><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。通过接口获取签名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来。</span></span><br><span class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤四：通过ready接口处理成功验证\"><a href=\"#步骤四：通过ready接口处理成功验证\" class=\"headerlink\" title=\"步骤四：通过ready接口处理成功验证\"></a>步骤四：通过ready接口处理成功验证</h4><p>config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><h3 id=\"config-invalid-signature\"><a href=\"#config-invalid-signature\" class=\"headerlink\" title=\"config:invalid signature\"></a>config:invalid signature</h3><p>出现这个错误的原因一定是签名错误。原因可能有以下几种情况，可以逐一排查：</p>\n<ul>\n<li>确认签名算法是否正确，可用<code>http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</code>页面工具进行校验。</li>\n<li>确认config中nonceStr（js中驼峰标准大写S）, timestamp（没有驼峰标准）。</li>\n<li>确认url格式。签名的url是页面完整的url，包括’http(s)://‘部分以及’？’后面的GET参数部分,但不包括’#’hash后面的部分。</li>\n<li>确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。</li>\n<li>确保一定缓存access_token和jsapi_ticket。</li>\n<li>确保你获取用来签名的url是动态获取的，动态页面可参见实例代码中php的实现方式。如果是html的静态页面在前端通过ajax将url传到后台签名，前端需要用js获取当前页面除去’#’hash部分的链接（可用<code>location.href.split(&#39;#&#39;)[0]</code>获取,而且需要encodeURIComponent），因为页面一旦分享，微信客户端会在你的链接末尾加入其它参数，如果不是动态获取当前链接，将导致分享后的页面签名失败。</li>\n</ul>\n<h3 id=\"获取用户昵称的特殊符号\"><a href=\"#获取用户昵称的特殊符号\" class=\"headerlink\" title=\"获取用户昵称的特殊符号\"></a>获取用户昵称的特殊符号</h3><p>有些用户的昵称中包含有非ASCLL字符，包括编码外的图像以及文字。可以使用base64进行处理。</p>\n","categories":[{"name":"weChat","path":"api/categories/weChat.json"}],"tags":[{"name":"weChat","path":"api/tags/weChat.json"}]}